{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap bc81ed46113aca2c43e0","webpack:///external \"tslib\"","webpack:///type.ts","webpack:///external \"babel-runtime/core-js/symbol/iterator\"","webpack:///external \"babel-runtime/core-js/get-iterator\"","webpack:///vector.ts","webpack:///fb/Schema.ts","webpack:///util/bit.ts","webpack:///ipc/metadata.ts","webpack:///visitor.ts","webpack:///data.ts","webpack:///external \"babel-runtime/core-js/json/stringify\"","webpack:///external \"babel-runtime/helpers/classCallCheck\"","webpack:///external \"babel-runtime/helpers/createClass\"","webpack:///external \"babel-runtime/core-js/object/create\"","webpack:///external \"babel-runtime/core-js/map\"","webpack:///external \"flatbuffers\"","webpack:///recordbatch.ts","webpack:///ipc/reader/vector.ts","webpack:///external \"babel-runtime/core-js/object/get-prototype-of\"","webpack:///external \"babel-runtime/helpers/possibleConstructorReturn\"","webpack:///external \"babel-runtime/helpers/inherits\"","webpack:///external \"babel-runtime/regenerator\"","webpack:///external \"babel-runtime/helpers/asyncToGenerator\"","webpack:///external \"babel-runtime/core-js/promise\"","webpack:///external \"babel-runtime/core-js/object/get-own-property-names\"","webpack:///external \"babel-runtime/helpers/typeof\"","webpack:///external \"babel-runtime/core-js/object/define-property\"","webpack:///external \"babel-runtime/core-js/symbol/to-string-tag\"","webpack:///fb/Message.ts","webpack:///vector/chunked.ts","webpack:///external \"text-encoding-utf-8\"","webpack:///external \"papaparse\"","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///./src/js/perspective.node.js","webpack:///external \"babel-runtime/helpers/toConsumableArray\"","webpack:///./obj/psp.sync.wasm","webpack:////Users/v625154/work/perspective/node_modules/arraybuffer-loader/lib/to-array-buffer.js","webpack:///./src/js/perspective.js","webpack:///(webpack)/buildin/module.js","webpack:///external \"babel-runtime/helpers/defineProperty\"","webpack:///external \"babel-runtime/helpers/extends\"","webpack:///external \"babel-runtime/core-js/number/parse-int\"","webpack:///external \"babel-runtime/core-js/object/keys\"","webpack:///./src/js/defaults.js","webpack:///./src/js/date_parser.js","webpack:///external \"moment\"","webpack:///./src/js/utils.js","webpack:///table.ts","webpack:///vector/dictionary.ts","webpack:///vector/list.ts","webpack:///vector/nested.ts","webpack:///vector/flat.ts","webpack:///predicate.ts","webpack:///ipc/reader/arrow.ts","webpack:///ipc/reader/json.ts","webpack:///external \"babel-runtime/core-js/object/entries\"","webpack:///util/int.ts","webpack:///ipc/reader/binary.ts","webpack:///fb/File.ts","webpack:///util/compat.ts","webpack:///external \"babel-runtime/core-js/symbol\"","webpack:///./src/js/view_formatters.js","webpack:///external \"babel-runtime/core-js/object/assign\"","webpack:///external \"http\"","webpack:///external \"ws\"","webpack:///external \"process\"","webpack:///./obj/psp.sync.js"],"names":["perspective","require","fs","http","WebSocket","process","path","load_perspective","RESOLVER","__non_webpack_require__","resolve","module","LOCAL_PATH","join","cwd","Module","wasmBinary","buffer","wasmJSMethod","ENVIRONMENT","exports","CLIENT_ID_GEN","DEFAULT_ASSETS","CONTENT_TYPES","read_promise","filePath","reject","readFile","error","content","code","create_http_server","assets","host_psp","request","response","setHeader","url","extname","contentType","rootDir","console","log","writeHead","end","paths","map","x","WebSocketHost","port","server","createServer","REQS","_wss","Server","noServer","perMessageDeflate","on","ws","id","msg","JSON","parse","e","clear_views","upgrade","socket","head","handleUpgrade","done","sock","emit","bind","listen","send","name","data","options","_tables","table","Host","global","performance","undefined","now","Date","self","CHUNKED_THRESHOLD","__MODULE__","infer_type","t","t_dtype","DTYPE_FLOAT64","DTYPE_INT32","DTYPE_BOOL","DTYPE_TIME","isNaN","Number","lower","toLowerCase","DTYPE_STR","get_column_type","val","transform_data","type","rv","length","tmp","clean_data","push","value","parse_data","names","types","preloaded","_types","size","get","cdata","row_count","Array","isArray","max_check","ix","Math","min","next","warn","n","i","inferredType","hasOwnProperty","parseInt","col","parser","DateParser","cell","names_in_update","col_num","transformed","is_arrow","load_arrow_buffer","arrow","Table","from","Uint8Array","loader","schema","fields","reduce","field","colIdx","loadColumn","getColumnAt","ArrowColumnLoader","values","nchunks","chunkVectors","chunks","y","column","visit","bitWidth","DTYPE_INT64","DTYPE_INT16","DTYPE_INT8","precision","Precision","DOUBLE","SINGLE","DTYPE_FLOAT32","dictionary","TypeVisitor","view","pool","ctx","sides","gnode","config","callbacks","nsides","prototype","delete","unregister_context","get_id","views","splice","indexOf","j","_delete_callback","_column_names","col_names","aggs","get_column_names","key","unity_get_column_count","col_name","col_path","unity_get_column_path","cnix","scalar_vec_to_val","reverse","COLUMN_SEPARATOR_STRING","get_tblschema","columns","new_schema","split","row_pivot","map_aggregate_types","aggregate","orig_type","INTEGER_AGGS","FLOAT_AGGS","agg","found_agg","includes","op","to_format","formatter","viewport","start_row","top","end_row","height","get_row_count","start_col","left","end_col","width","slice","column_pivot","get_data_zero","get_data_one","get_data_two","initDataValue","concat","row","ridx","idx","cidx","addRow","initRowValue","setColumnValue","row_path","unity_get_row_path","initColumnValue","addColumnValue","formatData","to_columns","call","formatters","jsonTableFormatter","to_json","jsonFormatter","to_csv","csvFormatter","num_rows","num_columns","get_row_expanded","unity_get_row_expanded","expand","unity_get_row_depth","open","t_header","HEADER_ROW","collapse","close","expand_to_depth","depth","collapse_to_depth","on_update","callback","get_step_delta","delta","cells","then","rows","all","apply","results","on_delete","index","computed","limit","limit_index","random","initialized","set_update_delegate","_update_callback","_calculate_computed","tbl","computed_defs","coldef","func","inputs","dtype","table_add_computed_column","unregister_gnode","get_table","_schema","_computed_schema","computed_schema","column_name","column_type","input_columns","input_type","computation","_string_to_filter_op","t_filter_op","FILTER_OP_AND","FILTER_OP_OR","FILTER_OP_LT","FILTER_OP_GT","FILTER_OP_EQ","contains","FILTER_OP_CONTAINS","FILTER_OP_LTEQ","FILTER_OP_GTEQ","FILTER_OP_NE","FILTER_OP_BEGINS_WITH","FILTER_OP_ENDS_WITH","or","in","FILTER_OP_IN","FILTER_OP_NOT_IN","and","FILTER_OP_IS_NAN","FILTER_OP_IS_NOT_NAN","_string_to_aggtype","t_aggtype","AGGTYPE_DISTINCT_COUNT","distinctcount","distinct","sum","AGGTYPE_SUM","mul","AGGTYPE_MUL","avg","AGGTYPE_MEAN","mean","count","AGGTYPE_COUNT","AGGTYPE_WEIGHTED_MEAN","unique","AGGTYPE_UNIQUE","any","AGGTYPE_ANY","median","AGGTYPE_MEDIAN","AGGTYPE_JOIN","div","AGGTYPE_SCALED_DIV","add","AGGTYPE_SCALED_ADD","dominant","AGGTYPE_DOMINANT","AGGTYPE_FIRST","AGGTYPE_LAST","AGGTYPE_AND","AGGTYPE_OR","last","AGGTYPE_LAST_VALUE","high","AGGTYPE_HIGH_WATER_MARK","low","AGGTYPE_LOW_WATER_MARK","AGGTYPE_SUM_ABS","AGGTYPE_SUM_NOT_NULL","AGGTYPE_MEAN_BY_COUNT","identity","AGGTYPE_IDENTITY","AGGTYPE_DISTINCT_LEAF","AGGTYPE_PCT_SUM_PARENT","AGGTYPE_PCT_SUM_GRAND_TOTAL","column_only","filters","filter_op","filter","sort","SORT_ORDERS","aggregates","aidx","agg_op","dep_length","t_aggs","context","make_context_two","register_context","t_ctx_type","TWO_SIDED_CONTEXT","$$","ptr","row_pivot_depth","column_pivot_depth","HEADER_COLUMN","groups","new_sort","z","s","make_context_one","ONE_SIDED_CONTEXT","make_context_zero","ZERO_SIDED_CONTEXT","v","update","pdata","cols","_columns","ArrayBuffer","chunk","make_table","fill","remove","add_computed","t_pool","clone_gnode_table","make_gnode","register_gnode","_column_metadata","metadata","meta","computed_col","column_metadata","execute","f","error_to_json","obj","forEach","_views","post","Error","client_id","debug","cmd","init","args","original","eval","g","view_name","table_name","result","subscribe","method","catch","message","WorkerHost","addEventListener","postMessage","WebAssembly","wasmXHR","XMLHttpRequest","responseType","onload","__module__","TYPE_AGGREGATES","TYPE_FILTERS","AGGREGATE_DEFAULTS","FILTER_DEFAULTS","worker","Buffer","papaparse","trim","dynamicTyping","header","new_pdata","Object","assugn","NUMBER_AGGREGATES","STRING_AGGREGATES","BOOLEAN_AGGREGATES","string","float","integer","boolean","date","BOOLEAN_FILTERS","NUMBER_FILTERS","STRING_FILTERS","DATE_FILTERS","is_valid_date","DATE_PARSE_CANDIDATES","moment","ISO_8601","RFC_2822","isValid","date_types","date_candidates","date_exclusions","input","candidate","bindall","detectIE","detectChrome","ScriptPath","constructor","window","ua","navigator","userAgent","msie","substring","trident","edge","isChromium","chrome","winNav","vendorName","vendor","isOpera","isIEedge","isIOSChrome","match","pathParts","stackLines","stack","callerIndex","fullPath","location","origin","pathname","host","hostname","file","String","search","start","defineProperty","searchElement","fromIndex","TypeError","o","len","k","max","abs","sameValueZero","colName","unshift","unparse","new_data"],"mappings":"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","file":"perspective.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"tslib\"), require(\"babel-runtime/core-js/symbol/iterator\"), require(\"babel-runtime/core-js/get-iterator\"), require(\"babel-runtime/core-js/json/stringify\"), require(\"babel-runtime/helpers/classCallCheck\"), require(\"babel-runtime/helpers/createClass\"), require(\"babel-runtime/core-js/object/create\"), require(\"babel-runtime/core-js/map\"), require(\"flatbuffers\"), require(\"babel-runtime/core-js/object/get-prototype-of\"), require(\"babel-runtime/helpers/possibleConstructorReturn\"), require(\"babel-runtime/helpers/inherits\"), require(\"babel-runtime/regenerator\"), require(\"babel-runtime/helpers/asyncToGenerator\"), require(\"babel-runtime/core-js/promise\"), require(\"babel-runtime/core-js/object/get-own-property-names\"), require(\"babel-runtime/helpers/typeof\"), require(\"babel-runtime/core-js/object/define-property\"), require(\"babel-runtime/core-js/symbol/to-string-tag\"), require(\"text-encoding-utf-8\"), require(\"papaparse\"), require(\"fs\"), require(\"path\"), require(\"babel-runtime/helpers/toConsumableArray\"), require(\"babel-runtime/helpers/defineProperty\"), require(\"babel-runtime/helpers/extends\"), require(\"babel-runtime/core-js/number/parse-int\"), require(\"babel-runtime/core-js/object/keys\"), require(\"moment\"), require(\"babel-runtime/core-js/object/entries\"), require(\"babel-runtime/core-js/symbol\"), require(\"babel-runtime/core-js/object/assign\"), require(\"http\"), require(\"ws\"), require(\"process\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"tslib\", \"babel-runtime/core-js/symbol/iterator\", \"babel-runtime/core-js/get-iterator\", \"babel-runtime/core-js/json/stringify\", \"babel-runtime/helpers/classCallCheck\", \"babel-runtime/helpers/createClass\", \"babel-runtime/core-js/object/create\", \"babel-runtime/core-js/map\", \"flatbuffers\", \"babel-runtime/core-js/object/get-prototype-of\", \"babel-runtime/helpers/possibleConstructorReturn\", \"babel-runtime/helpers/inherits\", \"babel-runtime/regenerator\", \"babel-runtime/helpers/asyncToGenerator\", \"babel-runtime/core-js/promise\", \"babel-runtime/core-js/object/get-own-property-names\", \"babel-runtime/helpers/typeof\", \"babel-runtime/core-js/object/define-property\", \"babel-runtime/core-js/symbol/to-string-tag\", \"text-encoding-utf-8\", \"papaparse\", \"fs\", \"path\", \"babel-runtime/helpers/toConsumableArray\", \"babel-runtime/helpers/defineProperty\", \"babel-runtime/helpers/extends\", \"babel-runtime/core-js/number/parse-int\", \"babel-runtime/core-js/object/keys\", \"moment\", \"babel-runtime/core-js/object/entries\", \"babel-runtime/core-js/symbol\", \"babel-runtime/core-js/object/assign\", \"http\", \"ws\", \"process\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"tslib\"), require(\"babel-runtime/core-js/symbol/iterator\"), require(\"babel-runtime/core-js/get-iterator\"), require(\"babel-runtime/core-js/json/stringify\"), require(\"babel-runtime/helpers/classCallCheck\"), require(\"babel-runtime/helpers/createClass\"), require(\"babel-runtime/core-js/object/create\"), require(\"babel-runtime/core-js/map\"), require(\"flatbuffers\"), require(\"babel-runtime/core-js/object/get-prototype-of\"), require(\"babel-runtime/helpers/possibleConstructorReturn\"), require(\"babel-runtime/helpers/inherits\"), require(\"babel-runtime/regenerator\"), require(\"babel-runtime/helpers/asyncToGenerator\"), require(\"babel-runtime/core-js/promise\"), require(\"babel-runtime/core-js/object/get-own-property-names\"), require(\"babel-runtime/helpers/typeof\"), require(\"babel-runtime/core-js/object/define-property\"), require(\"babel-runtime/core-js/symbol/to-string-tag\"), require(\"text-encoding-utf-8\"), require(\"papaparse\"), require(\"fs\"), require(\"path\"), require(\"babel-runtime/helpers/toConsumableArray\"), require(\"babel-runtime/helpers/defineProperty\"), require(\"babel-runtime/helpers/extends\"), require(\"babel-runtime/core-js/number/parse-int\"), require(\"babel-runtime/core-js/object/keys\"), require(\"moment\"), require(\"babel-runtime/core-js/object/entries\"), require(\"babel-runtime/core-js/symbol\"), require(\"babel-runtime/core-js/object/assign\"), require(\"http\"), require(\"ws\"), require(\"process\")) : factory(root[\"tslib\"], root[\"babel-runtime/core-js/symbol/iterator\"], root[\"babel-runtime/core-js/get-iterator\"], root[\"babel-runtime/core-js/json/stringify\"], root[\"babel-runtime/helpers/classCallCheck\"], root[\"babel-runtime/helpers/createClass\"], root[\"babel-runtime/core-js/object/create\"], root[\"babel-runtime/core-js/map\"], root[\"flatbuffers\"], root[\"babel-runtime/core-js/object/get-prototype-of\"], root[\"babel-runtime/helpers/possibleConstructorReturn\"], root[\"babel-runtime/helpers/inherits\"], root[\"babel-runtime/regenerator\"], root[\"babel-runtime/helpers/asyncToGenerator\"], root[\"babel-runtime/core-js/promise\"], root[\"babel-runtime/core-js/object/get-own-property-names\"], root[\"babel-runtime/helpers/typeof\"], root[\"babel-runtime/core-js/object/define-property\"], root[\"babel-runtime/core-js/symbol/to-string-tag\"], root[\"text-encoding-utf-8\"], root[\"papaparse\"], root[\"fs\"], root[\"path\"], root[\"babel-runtime/helpers/toConsumableArray\"], root[\"babel-runtime/helpers/defineProperty\"], root[\"babel-runtime/helpers/extends\"], root[\"babel-runtime/core-js/number/parse-int\"], root[\"babel-runtime/core-js/object/keys\"], root[\"moment\"], root[\"babel-runtime/core-js/object/entries\"], root[\"babel-runtime/core-js/symbol\"], root[\"babel-runtime/core-js/object/assign\"], root[\"http\"], root[\"ws\"], root[\"process\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_21__, __WEBPACK_EXTERNAL_MODULE_22__, __WEBPACK_EXTERNAL_MODULE_23__, __WEBPACK_EXTERNAL_MODULE_24__, __WEBPACK_EXTERNAL_MODULE_25__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_30__, __WEBPACK_EXTERNAL_MODULE_31__, __WEBPACK_EXTERNAL_MODULE_32__, __WEBPACK_EXTERNAL_MODULE_33__, __WEBPACK_EXTERNAL_MODULE_35__, __WEBPACK_EXTERNAL_MODULE_40__, __WEBPACK_EXTERNAL_MODULE_41__, __WEBPACK_EXTERNAL_MODULE_42__, __WEBPACK_EXTERNAL_MODULE_43__, __WEBPACK_EXTERNAL_MODULE_46__, __WEBPACK_EXTERNAL_MODULE_56__, __WEBPACK_EXTERNAL_MODULE_61__, __WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_64__, __WEBPACK_EXTERNAL_MODULE_65__, __WEBPACK_EXTERNAL_MODULE_66__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 34);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bc81ed46113aca2c43e0","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tslib\"\n// module id = 0\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { Vector, View } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor, VisitorNode } from './visitor';\n\nexport import Long = flatbuffers.Long;\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\nexport class Schema {\n    public static from(vectors: Vector[]) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    // @ts-ignore\n    protected _bodyLength: number;\n    // @ts-ignore\n    protected _headerType: MessageHeader;\n    public readonly fields: Field[];\n    public readonly version: MetadataVersion;\n    public readonly metadata?: Map<string, string>;\n    public readonly dictionaries: Map<number, Field<Dictionary>>;\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                version: MetadataVersion = MetadataVersion.V4,\n                dictionaries: Map<number, Field<Dictionary>> = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    public get bodyLength() { return this._bodyLength; }\n    public get headerType() { return this._headerType; }\n    public select(...fieldNames: string[]): Schema {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        prototype._bodyLength = 0;\n        prototype._headerType = MessageHeader.Schema;\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public get typeId(): T['TType'] { return this.type.TType; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices(): T | Int<any> {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n}\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n\nexport type NumericType = Int | Float | Date_ | Time | Interval | Timestamp;\nexport type FixedSizeType = Int64 |  Uint64 | Decimal | FixedSizeBinary;\nexport type PrimitiveType = NumericType | FixedSizeType;\n\nexport type FlatListType = Utf8 | Binary; // <-- these types have `offset`, `data`, and `validity` buffers\nexport type FlatType = Bool | PrimitiveType | FlatListType; // <-- these types have `data` and `validity` buffers\nexport type ListType = List<any>; // <-- these types have `offset` and `validity` buffers\nexport type NestedType = Map_ | Struct | List<any> | FixedSizeList<any> | Union<any>; // <-- these types have `validity` buffer and nested childData\nexport type SingleNestedType = List<any> | FixedSizeList<any>; // <-- these are nested types that can only have a single child\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\n export enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n    Dictionary      = 'Dictionary',  // Dictionary aka Category type\n    DenseUnion      = 'DenseUnion',  // Dense Union of logical types\n    SparseUnion     = 'SparseUnion',  // Sparse Union of logical types\n}\n\nexport interface DataType<TType extends Type = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport abstract class DataType<TType extends Type = any> implements Partial<VisitorNode> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    static             isInt (x: any): x is Int             { return x && x.TType === Type.Int;             }\n    static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    static            isTime (x: any): x is Time            { return x && x.TType === Type.Time;            }\n    static       isTimestamp (x: any): x is Timestamp       { return x && x.TType === Type.Timestamp;       }\n    static        isInterval (x: any): x is Interval        { return x && x.TType === Type.Interval;        }\n    static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    static           isUnion (x: any): x is Union           { return x && x.TType === Type.Union;           }\n    static      isDenseUnion (x: any): x is DenseUnion      { return x && x.TType === Type.DenseUnion;      }\n    static     isSparseUnion (x: any): x is SparseUnion     { return x && x.TType === Type.SparseUnion;     }\n    static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    constructor(public readonly TType: TType,\n                public readonly children?: Field[]) {}\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\nexport interface Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> { TArray: TArrayType; TValue: TValueType; }\nexport class Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> {\n    constructor(public readonly isSigned: boolean,\n                public readonly bitWidth: IntBitWidth) {\n        super(Type.Int);\n    }\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.bitWidth) {\n            case  8: return (this.isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this.isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this.isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this.isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<number, Int8Array> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<number, Int16Array> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<number, Int32Array> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Int32Array, Int32Array> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<number, Uint8Array> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<number, Uint16Array> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<number, Uint32Array> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Uint32Array, Uint32Array> { constructor() { super(false, 64); } }\n\nexport interface Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> { TArray: TArrayType; TValue: number; }\nexport class Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> {\n    constructor(public readonly precision: Precision) {\n        super(Type.Float);\n    }\n    // @ts-ignore\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Uint16Array> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Float32Array> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Float64Array> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super(Type.Decimal);\n    }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Date_ extends DataType<Type.Date> { TArray: Int32Array; TValue: Date; }\nexport class Date_ extends DataType<Type.Date> {\n    constructor(public readonly unit: DateUnit) {\n        super(Type.Date);\n    }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport interface Time extends DataType<Type.Time> { TArray: Uint32Array; TValue: number; }\nexport class Time extends DataType<Type.Time> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly bitWidth: TimeBitWidth) {\n        super(Type.Time);\n    }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport interface Timestamp extends DataType<Type.Timestamp> { TArray: Int32Array; TValue: number; }\nexport class Timestamp extends DataType<Type.Timestamp> {\n    constructor(public unit: TimeUnit, public timezone?: string | null) {\n        super(Type.Timestamp);\n    }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport interface Interval extends DataType<Type.Interval> { TArray: Int32Array; TValue: Int32Array; }\nexport class Interval extends DataType<Type.Interval> {\n    constructor(public unit: IntervalUnit) {\n        super(Type.Interval);\n    }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: any; TValue: Vector<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List> {\n    constructor(public children: Field[]) {\n        super(Type.List, children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\nexport class Struct extends DataType<Type.Struct> {\n    constructor(public children: Field[]) {\n        super(Type.Struct, children);\n    }\n    public toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\nexport interface Union<TType extends Type = any> extends DataType<TType> { TArray: Int8Array; TValue: any; }\nexport class Union<TType extends Type = any> extends DataType<TType> {\n    constructor(public readonly mode: UnionMode,\n                public readonly typeIds: ArrowType[],\n                public readonly children: Field[]) {\n        super(<TType> (mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);\n    }\n    public toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DenseUnion) => {\n        return proto[Symbol.toStringTag] = 'DenseUnion';\n    })(DenseUnion.prototype);\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: SparseUnion) => {\n        return proto[Symbol.toStringTag] = 'SparseUnion';\n    })(SparseUnion.prototype);\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: any; TValue: Vector<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> {\n    constructor(public readonly listSize: number,\n                public readonly children: Field[]) {\n        super(Type.FixedSizeList, children);\n    }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_ extends DataType<Type.Map> { TArray: Uint8Array; TValue: View<any>; }\nexport class Map_ extends DataType<Type.Map> {\n    constructor(public readonly keysSorted: boolean,\n                public readonly children: Field[]) {\n        super(Type.Map, children);\n    }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nexport interface Dictionary<T extends DataType = any> extends DataType<Type.Dictionary> { TArray: T['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly dictionary: T;\n    public readonly indices: Int<any>;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: Int<any>, id?: Long | number | null, isOrdered?: boolean | null) {\n        super(Type.Dictionary);\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get ArrayType() { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n    readonly prototype: T;\n    readonly BYTES_PER_ELEMENT: number;\n    new (length: number): T;\n    new (elements: Iterable<number>): T;\n    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n    of(...items: number[]): T;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n}\n\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\nexport interface TypedArray extends Iterable<number> {\n    [index: number]: number;\n    readonly length: number;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly buffer: ArrayBufferLike;\n    readonly BYTES_PER_ELEMENT: number;\n    [Symbol.toStringTag]: any;\n    [Symbol.iterator](): IterableIterator<number>;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(callbackfn: (value: number, index: number, array: TypedArray) => any, thisArg?: any): TypedArray;\n    find(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: TypedArray) => void, thisArg?: any): void;\n    includes(searchElement: number, fromIndex?: number): boolean;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    map(callbackfn: (value: number, index: number, array: TypedArray) => number, thisArg?: any): TypedArray;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reverse(): TypedArray;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): TypedArray;\n    some(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin: number, end?: number): TypedArray;\n    toLocaleString(): string;\n    toString(): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// type.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/symbol/iterator\"\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/get-iterator\"\n// module id = 3\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, DictionaryData } from './data';\nimport { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\nimport { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\nimport { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\n\nexport interface VectorLike { length: number; nullCount: number; }\n\nexport interface View<T extends DataType> {\n    clone(data: Data<T>): this;\n    isValid(index: number): boolean;\n    get(index: number): T['TValue'] | null;\n    set(index: number, value: T['TValue']): void;\n    toArray(): IterableArrayLike<T['TValue'] | null>;\n    indexOf(search: T['TValue']): number;\n    [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n}\n\nexport class Vector<T extends DataType = any> implements VectorLike, View<T>, VisitorNode {\n    public static create<T extends DataType>(data: Data<T>): Vector<T> {\n        return createVector(data);\n    }\n    public static concat<T extends DataType>(source?: Vector<T> | null, ...others: Vector<T>[]): Vector<T> {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source!);\n    }\n    public type: T;\n    public length: number;\n    public readonly data: Data<T>;\n    public readonly view: View<T>;\n    constructor(data: Data<T>, view: View<T>) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls: Uint8Array;\n        if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data);\n        } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        } else {\n            this.view = view;\n        }\n    }\n\n    public get nullCount() { return this.data.nullCount; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    public toJSON(): any { return this.toArray(); }\n    public clone<R extends T>(data: Data<R>, view: View<R> = this.view.clone(data) as any): this {\n        return new (this.constructor as any)(data, view);\n    }\n    public isValid(index: number): boolean {\n        return this.view.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this.view.get(index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.view.set(index, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return this.view.toArray();\n    }\n    public indexOf(value: T['TValue']) {\n        return this.view.indexOf(value);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return this.view[Symbol.iterator]();\n    }\n    public concat(...others: Vector<T>[]): this {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData)) as this;\n    }\n    public slice(begin?: number, end?: number): this {\n        let { length } = this;\n        let size = (this.view as any).size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) { to = total - (to * -1) % total; }\n        if (from < 0) { from = total - (from * -1) % total; }\n        if (to < from) { [from, to] = [to, from]; }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData)) as this;\n    }\n\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    public acceptVectorVisitor(visitor: VectorVisitor): any {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\n\nexport abstract class FlatVector<T extends FlatType> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public lows(): IntVector<Int32> { return this.asInt32(0, 2); }\n    public highs(): IntVector<Int32> { return this.asInt32(1, 2); }\n    public asInt32(offset: number = 0, stride: number = 2): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\n\nexport abstract class ListVectorBase<T extends (ListType | FlatListType)> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n    public getValueOffset(index: number) {\n        return this.valueOffsets[index];\n    }\n    public getValueLength(index: number) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\n\nexport abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n    // @ts-ignore\n    public readonly view: NestedView<T>;\n    // @ts-ignore\n    protected _childData: Data<any>[];\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return this.view.getChildAt<R>(index);\n    }\n    public get childData(): Data<any>[] {\n        let data: Data<T> | Data<any>[];\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data as Data<any>[];\n        } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = (data as NestedData<T>).childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = ((data as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n        return this._childData = chunks\n            .reduce<(Vector<T> | null)[][]>((cols, chunk) => chunk.childData\n            .reduce<(Vector<T> | null)[][]>((cols, _, i) => (\n                (cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))\n            ) && cols || cols, cols), [] as Vector<T>[][])\n        .map((vecs) => Vector.concat<T>(...vecs).data);\n    }\n}\n\nimport { List, Binary, Utf8, Bool, } from './type';\nimport { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n\nimport { ChunkedView } from './vector/chunked';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, ValidityView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\n\nexport class NullVector extends Vector<Null> {\n    constructor(data: Data<Null>, view: View<Null> = new NullView(data)) {\n        super(data, view);\n    }\n}\n\nexport class BoolVector extends Vector<Bool> {\n    public static from(data: IterableArrayLike<boolean>) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));\n    }\n    public get values() { return this.data.values; }\n    constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n        super(data, view);\n    }\n}\n\nexport class IntVector<T extends Int = Int<any>> extends FlatVector<T> {\n    public static from(data: Int8Array): IntVector<Int8>;\n    public static from(data: Int16Array): IntVector<Int16>;\n    public static from(data: Int32Array): IntVector<Int32>;\n    public static from(data: Uint8Array): IntVector<Uint8>;\n    public static from(data: Uint16Array): IntVector<Uint16>;\n    public static from(data: Uint32Array): IntVector<Uint32>;\n    public static from(data: Int32Array, is64: true): IntVector<Int64>;\n    public static from(data: Uint32Array, is64: true): IntVector<Uint64>;\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView<T extends Int>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<T>, view: View<T> = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n    public static from(data: Uint16Array): FloatVector<Float16>;\n    public static from(data: Float32Array): FloatVector<Float32>;\n    public static from(data: Float64Array): FloatVector<Float64>;\n    public static from(data: any) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView<T extends Float>(data: Data<T>): FlatView<any> {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data as Data<Float16>);\n    }\n    constructor(data: Data<T>, view: View<T> = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class DateVector extends FlatVector<Date_> {\n    static defaultView<T extends Date_>(data: Data<T>) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data: Data<Date_>, view: View<Date_> = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data as any, 1) as any);\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class DecimalVector extends FlatVector<Decimal> {\n    constructor(data: Data<Decimal>, view: View<Decimal> = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\n\nexport class TimeVector extends FlatVector<Time> {\n    static defaultView<T extends Time>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<Time>, view: View<Time> = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class TimestampVector extends FlatVector<Timestamp> {\n    constructor(data: Data<Timestamp>, view: View<Timestamp> = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data as any, 1) as any);\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data as any, 2) as any);\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class IntervalVector extends FlatVector<Interval> {\n    static defaultView<T extends Interval>(data: Data<T>) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data: Data<Interval>, view: View<Interval> = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class BinaryVector extends ListVectorBase<Binary> {\n    constructor(data: Data<Binary>, view: View<Binary> = new BinaryView(data)) {\n        super(data, view);\n    }\n    public asUtf8() {\n        return new Utf8Vector((this.data as FlatListData<any>).clone(new Utf8()));\n    }\n}\n\nexport class FixedSizeBinaryVector extends FlatVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>, view: View<FixedSizeBinary> = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\n\nexport class Utf8Vector extends ListVectorBase<Utf8> {\n    constructor(data: Data<Utf8>, view: View<Utf8> = new Utf8View(data)) {\n        super(data, view);\n    }\n    public asBinary() {\n        return new BinaryVector((this.data as FlatListData<any>).clone(new Binary()));\n    }\n}\n\nexport class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n    constructor(data: Data<List<T>>, view: View<List<T>> = new ListView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FixedSizeListVector extends Vector<FixedSizeList> {\n    constructor(data: Data<FixedSizeList>, view: View<FixedSizeList> = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n}\n\nexport class MapVector extends NestedVector<Map_> {\n    constructor(data: Data<Map_>, view: View<Map_> = new MapView(data)) {\n        super(data, view);\n    }\n    public asStruct() {\n        return new StructVector((this.data as NestedData<any>).clone(new Struct(this.type.children)));\n    }\n}\n\nexport class StructVector extends NestedVector<Struct> {\n    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n        super(data, view);\n    }\n    public asMap(keysSorted: boolean = false) {\n        return new MapVector((this.data as NestedData<any>).clone(new Map_(keysSorted, this.type.children)));\n    }\n}\n\nexport class UnionVector<T extends (SparseUnion | DenseUnion) = any> extends NestedVector<T> {\n    constructor(data: Data<T>, view: View<T> = <any> (data.type.mode === UnionMode.Sparse ? new UnionView<SparseUnion>(data as Data<SparseUnion>) : new DenseUnionView(data as Data<DenseUnion>))) {\n        super(data, view);\n    }\n}\n\nexport class DictionaryVector<T extends DataType = DataType> extends Vector<Dictionary<T>> {\n    // @ts-ignore\n    public readonly indices: Vector<Int>;\n    // @ts-ignore\n    public readonly dictionary: Vector<T>;\n    constructor(data: Data<Dictionary<T>>, view: View<Dictionary<T>> = new DictionaryView<T>(data.dictionary, new IntVector(data.indices))) {\n        super(data as Data<any>, view);\n        if (view instanceof ValidityView) {\n            view = (view as any).view;\n        }\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indices = view.indices;\n            this.dictionary = data.dictionary;\n        } else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors as DictionaryVector<T>[];\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indices = chunks.reduce<Vector<Int> | null>(\n                (idxs: Vector<Int> | null, dict: DictionaryVector<T>) =>\n                    !idxs ? dict.indices! : idxs.concat(dict.indices!),\n                null\n            )!;\n        } else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    public getKey(index: number) { return this.indices.get(index); }\n    public getValue(key: number) { return this.dictionary.get(key); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n}\n\nexport const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\n    <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n))(class VectorLoader<T extends DataType> extends TypeVisitor {\n    constructor(private data: Data<T>) { super(); }\n    visitNull           (_type: Null)            { return new NullVector(this.data);            }\n    visitInt            (_type: Int)             { return new IntVector(this.data);             }\n    visitFloat          (_type: Float)           { return new FloatVector(this.data);           }\n    visitBinary         (_type: Binary)          { return new BinaryVector(this.data);          }\n    visitUtf8           (_type: Utf8)            { return new Utf8Vector(this.data);            }\n    visitBool           (_type: Bool)            { return new BoolVector(this.data);            }\n    visitDecimal        (_type: Decimal)         { return new DecimalVector(this.data);         }\n    visitDate           (_type: Date_)           { return new DateVector(this.data);            }\n    visitTime           (_type: Time)            { return new TimeVector(this.data);            }\n    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(this.data);       }\n    visitInterval       (_type: Interval)        { return new IntervalVector(this.data);        }\n    visitList           (_type: List)            { return new ListVector(this.data);            }\n    visitStruct         (_type: Struct)          { return new StructVector(this.data);          }\n    visitUnion          (_type: Union)           { return new UnionVector(this.data);           }\n    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(this.data); }\n    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(this.data);   }\n    visitMap            (_type: Map_)            { return new MapVector(this.data);             }\n    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(this.data);      }\n});\n\n\n\n// WEBPACK FOOTER //\n// vector.ts","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Schema.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TypedArray } from '../type';\n\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\nexport function popcnt_array(arr: TypedArray, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n\n\n// WEBPACK FOOTER //\n// util/bit.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { align } from '../util/bit';\nimport { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n\nexport class Footer {\n    constructor(public dictionaryBatches: FileBlock[], public recordBatches: FileBlock[], public schema: Schema) {}\n}\n\nexport class FileBlock {\n    constructor(public metaDataLength: number, public bodyLength: Long, public offset: Long) {}\n}\n\nexport class Message {\n    public bodyLength: number;\n    public version: MetadataVersion;\n    public headerType: MessageHeader;\n    constructor(version: MetadataVersion, bodyLength: Long | number, headerType: MessageHeader) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m: Message): m is Schema { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m: Message): m is RecordBatchMetadata { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m: Message): m is DictionaryBatch { return m.headerType === MessageHeader.DictionaryBatch; }\n}\n\nexport class RecordBatchMetadata extends Message {\n    public length: number;\n    public nodes: FieldMetadata[];\n    public buffers: BufferMetadata[];\n    constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[]) {\n        super(version, buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0), MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class DictionaryBatch extends Message {\n    public id: number;\n    public isDelta: boolean;\n    public data: RecordBatchMetadata;\n    constructor(version: MetadataVersion, data: RecordBatchMetadata, id: Long | number, isDelta: boolean = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    private static atomicDictionaryId = 0;\n    public static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    public get nodes(): FieldMetadata[] { return this.data.nodes; }\n    public get buffers(): BufferMetadata[] { return this.data.buffers; }\n}\n\nexport class BufferMetadata {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class FieldMetadata {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/metadata.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { Type, DataType, Dictionary } from './type';\nimport { Utf8, Binary, Decimal, FixedSizeBinary } from './type';\nimport { List, FixedSizeList, Union, Map_, Struct } from './type';\nimport { Bool, Null, Int, Float, Date_, Time, Interval, Timestamp } from './type';\n\nexport interface VisitorNode {\n    acceptTypeVisitor(visitor: TypeVisitor): any;\n    acceptVectorVisitor(visitor: VectorVisitor): any;\n}\n\nexport abstract class TypeVisitor {\n    visit(type: Partial<VisitorNode>): any {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types: Partial<VisitorNode>[]): any[] {\n        return types.map((type) => this.visit(type));\n    }\n    abstract visitNull?(type: Null): any;\n    abstract visitBool?(type: Bool): any;\n    abstract visitInt?(type: Int): any;\n    abstract visitFloat?(type: Float): any;\n    abstract visitUtf8?(type: Utf8): any;\n    abstract visitBinary?(type: Binary): any;\n    abstract visitFixedSizeBinary?(type: FixedSizeBinary): any;\n    abstract visitDate?(type: Date_): any;\n    abstract visitTimestamp?(type: Timestamp): any;\n    abstract visitTime?(type: Time): any;\n    abstract visitDecimal?(type: Decimal): any;\n    abstract visitList?(type: List): any;\n    abstract visitStruct?(type: Struct): any;\n    abstract visitUnion?(type: Union<any>): any;\n    abstract visitDictionary?(type: Dictionary): any;\n    abstract visitInterval?(type: Interval): any;\n    abstract visitFixedSizeList?(type: FixedSizeList): any;\n    abstract visitMap?(type: Map_): any;\n\n    static visitTypeInline<T extends DataType>(visitor: TypeVisitor, type: T): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(type            as any as Null);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(type             as any as Int);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(type           as any as Float);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(type          as any as Binary);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(type            as any as Utf8);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(type            as any as Bool);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(type         as any as Decimal);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(type            as any as Date_);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(type            as any as Time);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(type       as any as Timestamp);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(type        as any as Interval);\n            case Type.List:            return visitor.visitList            && visitor.visitList(type            as any as List<T>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(type          as any as Struct);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(type           as any as Union);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type as any as FixedSizeBinary);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(type   as any as FixedSizeList);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(type             as any as Map_);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(type      as any as Dictionary);\n            default: return null;\n        }\n    }\n}\n\nexport abstract class VectorVisitor {\n    visit(vector: Partial<VisitorNode>): any {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors: Partial<VisitorNode>[]): any[] {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    abstract visitNull?(vector: Vector<Null>): any;\n    abstract visitBool?(vector: Vector<Bool>): any;\n    abstract visitInt?(vector: Vector<Int>): any;\n    abstract visitFloat?(vector: Vector<Float>): any;\n    abstract visitUtf8?(vector: Vector<Utf8>): any;\n    abstract visitBinary?(vector: Vector<Binary>): any;\n    abstract visitFixedSizeBinary?(vector: Vector<FixedSizeBinary>): any;\n    abstract visitDate?(vector: Vector<Date_>): any;\n    abstract visitTimestamp?(vector: Vector<Timestamp>): any;\n    abstract visitTime?(vector: Vector<Time>): any;\n    abstract visitDecimal?(vector: Vector<Decimal>): any;\n    abstract visitList?(vector: Vector<List>): any;\n    abstract visitStruct?(vector: Vector<Struct>): any;\n    abstract visitUnion?(vector: Vector<Union<any>>): any;\n    abstract visitDictionary?(vector: Vector<Dictionary>): any;\n    abstract visitInterval?(vector: Vector<Interval>): any;\n    abstract visitFixedSizeList?(vector: Vector<FixedSizeList>): any;\n    abstract visitMap?(vector: Vector<Map_>): any;\n\n    static visitTypeInline<T extends DataType>(visitor: VectorVisitor, type: T, vector: Vector<T>): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(vector            as any as Vector<Null>);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(vector             as any as Vector<Int>);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(vector           as any as Vector<Float>);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(vector          as any as Vector<Binary>);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(vector            as any as Vector<Utf8>);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(vector            as any as Vector<Bool>);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(vector         as any as Vector<Decimal>);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(vector            as any as Vector<Date_>);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(vector            as any as Vector<Time>);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(vector       as any as Vector<Timestamp>);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(vector        as any as Vector<Interval>);\n            case Type.List:            return visitor.visitList            && visitor.visitList(vector            as any as Vector<List<T>>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(vector          as any as Vector<Struct>);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(vector           as any as Vector<Union>);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector as any as Vector<FixedSizeBinary>);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(vector   as any as Vector<FixedSizeList>);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(vector             as any as Vector<Map_>);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(vector      as any as Vector<Dictionary>);\n            default: return null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// visitor.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorLike, Vector } from './vector';\nimport { VectorType, TypedArray, TypedArrayConstructor, Dictionary } from './type';\nimport { Int, Bool, FlatListType, List, FixedSizeList, Struct, Map_ } from './type';\nimport { DataType, FlatType, ListType, NestedType, SingleNestedType, DenseUnion, SparseUnion } from './type';\n\nexport function toTypedArray<T extends TypedArray>(ArrayType: TypedArrayConstructor<T>, values?: T | ArrayLike<number> | Iterable<number> | null): T {\n    if (!ArrayType && ArrayBuffer.isView(values)) { return values; }\n    return values instanceof ArrayType ? values\n         : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n         : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\n\nexport type Data<T extends DataType> = DataTypes<T>[T['TType']] & BaseData<T>;\nexport interface DataTypes<T extends DataType> {\n/*                [Type.NONE]*/  0: BaseData<T>;\n/*                [Type.Null]*/  1: FlatData<T>;\n/*                 [Type.Int]*/  2: FlatData<T>;\n/*               [Type.Float]*/  3: FlatData<T>;\n/*              [Type.Binary]*/  4: FlatListData<T>;\n/*                [Type.Utf8]*/  5: FlatListData<T>;\n/*                [Type.Bool]*/  6: BoolData;\n/*             [Type.Decimal]*/  7: FlatData<T>;\n/*                [Type.Date]*/  8: FlatData<T>;\n/*                [Type.Time]*/  9: FlatData<T>;\n/*           [Type.Timestamp]*/ 10: FlatData<T>;\n/*            [Type.Interval]*/ 11: FlatData<T>;\n/*                [Type.List]*/ 12: ListData<List<T>>;\n/*              [Type.Struct]*/ 13: NestedData<Struct>;\n/*               [Type.Union]*/ 14: UnionData;\n/*     [Type.FixedSizeBinary]*/ 15: FlatData<T>;\n/*       [Type.FixedSizeList]*/ 16: SingleNestedData<FixedSizeList<T>>;\n/*                 [Type.Map]*/ 17: NestedData<Map_>;\n/*  [Type.DenseUnion]*/ DenseUnion: DenseUnionData;\n/*[Type.SparseUnion]*/ SparseUnion: SparseUnionData;\n/*[  Type.Dictionary]*/ Dictionary: DictionaryData<any>;\n}\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport class BaseData<T extends DataType = DataType> implements VectorLike {\n    public type: T;\n    public length: number;\n    public offset: number;\n    // @ts-ignore\n    public childData: Data<any>[];\n    protected _nullCount: number | kUnknownNullCount;\n    protected /*  [VectorType.OFFSET]:*/ 0?: Int32Array;\n    protected /*    [VectorType.DATA]:*/ 1?: T['TArray'];\n    protected /*[VectorType.VALIDITY]:*/ 2?: Uint8Array;\n    protected /*    [VectorType.TYPE]:*/ 3?: Int8Array;\n    constructor(type: T, length: number, offset?: number, nullCount?: number) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    public get typeId() { return this.type.TType; }\n    public get nullBitmap() { return this[VectorType.VALIDITY]; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new BaseData(type, length, offset, nullCount);\n    }\n    public slice(offset: number, length: number) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(\n            this.type, length, this.offset + offset, +(this._nullCount === 0) - 1\n        ) as any, offset, length);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        let arr: any;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    protected sliceData(data: T['TArray'] & TypedArray, offset: number, length: number) {\n        return data.subarray(offset, offset + length);\n    }\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\n\nexport class FlatData<T extends FlatType> extends BaseData<T> {\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, data: Iterable<number>, offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new (this.constructor as any)(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount) as FlatData<R>;\n    }\n}\n\nexport class BoolData extends FlatData<Bool> {\n    protected sliceData(data: Uint8Array) { return data; }\n}\n\nexport class FlatListData<T extends FlatListType> extends FlatData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, data: T['TArray'], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount) as FlatListData<R>;\n    }\n}\n\nexport class DictionaryData<T extends DataType> extends BaseData<Dictionary<T>> {\n    protected _dictionary: Vector<T>;\n    protected _indices: Data<Int<any>>;\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    constructor(type: Dictionary<T>, dictionary: Vector<T>, indices: Data<Int<any>>) {\n        super(type, indices.length, indices.offset, (indices as any)._nullCount);\n        this._indices = indices;\n        this._dictionary = dictionary;\n    }\n    public get nullCount() { return this._indices.nullCount; }\n    public get nullBitmap() { return this._indices.nullBitmap; }\n    public clone<R extends Dictionary<T>>(type: R, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary as any);\n        return new DictionaryData<R>(\n            this.type as any,\n            this._dictionary.clone(data) as any,\n            this._indices.slice(offset - this.offset, length)\n        ) as any;\n    }\n    protected sliceInternal(clone: this, _offset: number, _length: number) {\n        clone.length = clone._indices.length;\n        clone._nullCount = (clone._indices as any)._nullCount;\n        return clone;\n    }\n}\n\nexport class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\n\nexport class SingleNestedData<T extends SingleNestedType> extends NestedData<T> {\n    protected _valuesData: Data<T>;\n    public get values() { return this._valuesData; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n}\n\nexport class ListData<T extends ListType> extends SingleNestedData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ListData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount);\n    }\n}\n\nexport class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n    public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n    public get typeIds() { return this[VectorType.TYPE]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\n\nexport class SparseUnionData extends UnionData<SparseUnion> {\n    constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new SparseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class DenseUnionData extends UnionData<DenseUnion> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: DenseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, valueOffsets: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new DenseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this[VectorType.OFFSET],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class ChunkedData<T extends DataType> extends BaseData<T> {\n    // @ts-ignore\n    protected _chunkData: Data<T>[];\n    protected _chunkVectors: Vector<T>[];\n    protected _chunkOffsets: Uint32Array;\n    public get chunkVectors() { return this._chunkVectors; }\n    public get chunkOffsets() { return this._chunkOffsets; }\n    public get chunkData() {\n        return this._chunkData || (\n               this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    constructor(type: T, length: number, chunkVectors: Vector<T>[], offset?: number, nullCount?: number, chunkOffsets?: Uint32Array) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ChunkedData<R>(\n            type, length,\n            this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n            offset, nullCount, this._chunkOffsets\n        );\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices: Vector<T>[] = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets<T extends DataType>(childVectors: Vector<T>[]) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// data.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/json/stringify\"\n// module id = 10\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/classCallCheck\"\n// module id = 11\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_12__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/createClass\"\n// module id = 12\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/object/create\"\n// module id = 13\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_14__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/map\"\n// module id = 14\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_15__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"flatbuffers\"\n// module id = 15\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Struct, DataType } from './type';\nimport { flatbuffers } from 'flatbuffers';\nimport { View, Vector, StructVector } from './vector';\nimport { Data, NestedData } from './data';\n\nimport Long = flatbuffers.Long;\n\nexport class RecordBatch extends StructVector {\n    public static from(vectors: Vector[]) {\n        return new RecordBatch(Schema.from(vectors),\n            Math.max(...vectors.map((v) => v.length)),\n            vectors\n        );\n    }\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n    constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n    constructor(...args: any[]) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1] as Data<Struct>;\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        } else {\n            const [schema, numRows, cols] = args;\n            const childData: Data<any>[] = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col: Data<any> | Vector = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n        return new RecordBatch(this.schema, data as any, view) as any;\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt<R>(index);\n    }\n    public select(...columnNames: string[]) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(\n            this.schema.select(...columnNames), this.length,\n            this.childData.filter((_, i) => namesToKeep[fields[i].name])\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// recordbatch.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { FlatType, NestedType, ListType } from '../../type';\nimport { Message, FieldMetadata, BufferMetadata } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport {\n    Schema, Field,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    UnionMode, SparseUnion, DenseUnion, FlatListType, DataType,\n} from '../../type';\n\nexport function* readRecordBatches(messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport async function* readRecordBatchesAsync(messages: AsyncIterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for await (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport function* readRecordBatch(schema: Schema, message: Message, loader: TypeDataLoader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    } else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId)!;\n        const dictionaryDataType = (dictionaryField.type as Dictionary).dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId)!.concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\n\nexport abstract class TypeDataLoader extends TypeVisitor {\n\n    public dictionaries: Map<number, Vector>;\n    protected nodes: Iterator<FieldMetadata>;\n    protected buffers: Iterator<BufferMetadata>;\n\n    constructor(nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visitFields(fields: Field[]) { return fields.map((field) => this.visit(field.type)); }\n\n    public visitNull           (type: Null)            { return this.visitNullType(type);   }\n    public visitInt            (type: Int)             { return this.visitFlatType(type);   }\n    public visitFloat          (type: Float)           { return this.visitFlatType(type);   }\n    public visitBinary         (type: Binary)          { return this.visitFlatList(type);   }\n    public visitUtf8           (type: Utf8)            { return this.visitFlatList(type);   }\n    public visitBool           (type: Bool)            { return this.visitBoolType(type);   }\n    public visitDecimal        (type: Decimal)         { return this.visitFlatType(type);   }\n    public visitDate           (type: Date_)           { return this.visitFlatType(type);   }\n    public visitTime           (type: Time)            { return this.visitFlatType(type);   }\n    public visitTimestamp      (type: Timestamp)       { return this.visitFlatType(type);   }\n    public visitInterval       (type: Interval)        { return this.visitFlatType(type);   }\n    public visitList           (type: List)            { return this.visitListType(type);   }\n    public visitStruct         (type: Struct)          { return this.visitNestedType(type); }\n    public visitUnion          (type: Union)           { return this.visitUnionType(type);  }\n    public visitFixedSizeBinary(type: FixedSizeBinary) { return this.visitFlatType(type);   }\n    public visitFixedSizeList  (type: FixedSizeList)   { return this.visitFixedSizeListType(type); }\n    public visitMap            (type: Map_)            { return this.visitNestedType(type); }\n    public visitDictionary     (type: Dictionary)      {\n        return new DictionaryData(type, this.dictionaries.get(type.id)!, this.visit(type.indices));\n    }\n    protected getFieldMetadata() { return this.nodes.next().value; }\n    protected getBufferMetadata() { return this.buffers.next().value; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected abstract readData<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected visitNullType(type: Null, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<any>(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    protected visitFlatType<T extends FlatType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<T>(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    protected visitBoolType(type: Bool, { length, nullCount }: FieldMetadata = this.getFieldMetadata(), data?: Uint8Array) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    protected visitFlatList<T extends FlatListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    protected visitListType<T extends ListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new ListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitFixedSizeListType<T extends FixedSizeList>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new SingleNestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitNestedType<T extends NestedType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new NestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    protected visitUnionType(type: DenseUnion | SparseUnion, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type as SparseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type as DenseUnion, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/vector.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/object/get-prototype-of\"\n// module id = 18\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/possibleConstructorReturn\"\n// module id = 19\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/inherits\"\n// module id = 20\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_21__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/regenerator\"\n// module id = 21\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_22__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/asyncToGenerator\"\n// module id = 22\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_23__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/promise\"\n// module id = 23\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_24__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/object/get-own-property-names\"\n// module id = 24\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_25__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/typeof\"\n// module id = 25\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/object/define-property\"\n// module id = 26\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_27__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/symbol/to-string-tag\"\n// module id = 27\n// module chunks = 0","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Message.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ChunkedData } from '../data';\nimport { View, Vector, NestedVector } from '../vector';\nimport { DataType, TypedArray, IterableArrayLike } from '../type';\n\nexport class ChunkedView<T extends DataType> implements View<T> {\n    public chunkVectors: Vector<T>[];\n    public chunkOffsets: Uint32Array;\n    // @ts-ignore\n    protected _children: Vector<any>[];\n    constructor(data: ChunkedData<T>) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    public clone(data: ChunkedData<T>): this {\n        return new ChunkedView(data) as this;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n              (this._children[index] = Vector.concat<R>(\n                  ...(<any> this.chunkVectors as NestedVector<any>[])\n                         .map((chunk) => chunk.getChildAt<R>(index))));\n    }\n    public isValid(index: number): boolean {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    public get(index: number): T['TValue'] | null {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array<any>(numChunks);\n        let sourcesLen = 0, ArrayType: any = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet as any;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n    public indexOf(search: T['TValue']) {\n        let offset = 0, result;\n        for (const vector of this.chunkVectors) {\n            result = vector.indexOf(search);\n            if (result !== -1) { return result + offset; }\n            offset += vector.length;\n        }\n\n        return -1;\n    }\n}\n\nfunction typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n    return target.set(source, index) || index + source.length;\n}\n\nfunction arraySet(source: any[], target: any[], index: number) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/chunked.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_30__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"text-encoding-utf-8\"\n// module id = 30\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_31__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"papaparse\"\n// module id = 31\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_32__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 32\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_33__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 33\n// module chunks = 0","/******************************************************************************\r\n *\r\n * Copyright (c) 2017, the Perspective Authors.\r\n *\r\n * This file is part of the Perspective library, distributed under the terms of\r\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\r\n *\r\n */\r\n\r\nimport buffer from \"../../obj/psp.sync.wasm\";\r\n\r\nconst perspective = require(\"./perspective.js\");\r\n\r\nconst fs = require(\"fs\");\r\nconst http = require(\"http\");\r\nconst WebSocket = require(\"ws\");\r\nconst process = require(\"process\");\r\n\r\nconst path = require(\"path\");\r\n\r\nconst load_perspective = require(\"../../obj/psp.sync.js\").load_perspective;\r\n\r\n// eslint-disable-next-line no-undef\r\nconst RESOLVER = typeof __non_webpack_require__ !== \"undefined\" ? __non_webpack_require__.resolve : module.require.resolve;\r\n\r\nconst LOCAL_PATH = path.join(process.cwd(), \"node_modules\");\r\n\r\nlet Module = load_perspective({\r\n    wasmBinary: buffer,\r\n    wasmJSMethod: \"native-wasm\",\r\n    ENVIRONMENT: \"NODE\"\r\n});\r\n\r\nmodule.exports = perspective(Module);\r\ndelete module.exports[\"worker\"];\r\n\r\nlet CLIENT_ID_GEN = 0;\r\n\r\nconst DEFAULT_ASSETS = [\r\n    \"@jpmorganchase/perspective/build\",\r\n    \"@jpmorganchase/perspective-viewer/build\",\r\n    \"@jpmorganchase/perspective-viewer-highcharts/build\",\r\n    \"@jpmorganchase/perspective-viewer-hypergrid/build\"\r\n];\r\n\r\nconst CONTENT_TYPES = {\r\n    \".js\": \"text/javascript\",\r\n    \".css\": \"text/css\",\r\n    \".json\": \"application/json\",\r\n    \".arrow\": \"arraybuffer\",\r\n    \".wasm\": \"application/wasm\"\r\n};\r\n\r\nfunction read_promise(filePath) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(filePath, function(error, content) {\r\n            if (error && error.code !== \"ENOENT\") {\r\n                reject(error);\r\n            } else {\r\n                resolve(content);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction create_http_server(assets, host_psp) {\r\n    return async function(request, response) {\r\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n        response.setHeader(\"Access-Control-Request-Method\", \"*\");\r\n        response.setHeader(\"Access-Control-Allow-Methods\", \"OPTIONS,GET\");\r\n        response.setHeader(\"Access-Control-Allow-Headers\", \"*\");\r\n        let url = request.url;\r\n        if (url === \"/\") {\r\n            url = \"/index.html\";\r\n        }\r\n        let extname = path.extname(url);\r\n        let contentType = CONTENT_TYPES[extname] || \"text/html\";\r\n        try {\r\n            for (let rootDir of assets) {\r\n                let filePath = rootDir + url;\r\n                let content = await read_promise(filePath);\r\n                if (typeof content !== \"undefined\") {\r\n                    console.log(`200 ${url}`);\r\n                    response.writeHead(200, {\"Content-Type\": contentType});\r\n                    response.end(content, extname === \".arrow\" ? \"user-defined\" : \"utf-8\");\r\n                    return;\r\n                }\r\n            }\r\n            if (host_psp || typeof host_psp === \"undefined\") {\r\n                for (let rootDir of DEFAULT_ASSETS) {\r\n                    try {\r\n                        let paths = RESOLVER.paths(rootDir + url);\r\n                        paths = [...paths, ...assets.map(x => path.join(x, \"node_modules\")), LOCAL_PATH];\r\n                        let filePath = RESOLVER(rootDir + url, {paths});\r\n                        let content = await read_promise(filePath);\r\n                        if (typeof content !== \"undefined\") {\r\n                            console.log(`200 ${url}`);\r\n                            response.writeHead(200, {\"Content-Type\": contentType});\r\n                            response.end(content, extname === \".arrow\" ? \"user-defined\" : \"utf-8\");\r\n                            return;\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n            }\r\n            console.error(`404 ${url}`);\r\n            response.writeHead(404);\r\n            response.end(\"\", \"utf-8\");\r\n        } catch (error) {\r\n            if (error.code !== \"ENOENT\") {\r\n                console.error(`500 ${url}`);\r\n                response.writeHead(500);\r\n                response.end(\"\", \"utf-8\");\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * A WebSocket server instance for a remote perspective, and convenience HTTP\r\n * file server for easy hosting.\r\n */\r\nclass WebSocketHost extends module.exports.Host {\r\n    constructor({port, assets, host_psp}) {\r\n        super();\r\n        port = port || 8080;\r\n        assets = assets || [\"./\"];\r\n\r\n        const server = http.createServer(create_http_server(assets, host_psp));\r\n\r\n        this.REQS = {};\r\n        this._wss = new WebSocket.Server({noServer: true, perMessageDeflate: true});\r\n        this._wss.on(\"connection\", ws => {\r\n            ws.id = CLIENT_ID_GEN++;\r\n            ws.on(\"message\", msg => {\r\n                msg = JSON.parse(msg);\r\n                this.REQS[msg.id] = ws;\r\n                try {\r\n                    this.process(msg, ws.id);\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n            ws.on(\"close\", () => {\r\n                this.clear_views(ws.id);\r\n            });\r\n            ws.on(\"error\", console.error);\r\n        });\r\n\r\n        server.on(\r\n            \"upgrade\",\r\n            function upgrade(request, socket, head) {\r\n                console.log(\"200    *** websocket upgrade ***\");\r\n                this._wss.handleUpgrade(\r\n                    request,\r\n                    socket,\r\n                    head,\r\n                    function done(sock) {\r\n                        this._wss.emit(\"connection\", sock, request);\r\n                    }.bind(this)\r\n                );\r\n            }.bind(this)\r\n        );\r\n\r\n        server.listen(port);\r\n        console.log(`Listening on port ${port}`);\r\n    }\r\n\r\n    post(msg) {\r\n        this.REQS[msg.id].send(JSON.stringify(msg));\r\n        delete this.REQS[msg.id];\r\n    }\r\n\r\n    open(name, data, options) {\r\n        this._tables[name] = module.exports.table(data, options);\r\n    }\r\n}\r\n\r\nmodule.exports.WebSocketHost = WebSocketHost;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/perspective.node.js","module.exports = __WEBPACK_EXTERNAL_MODULE_35__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/toConsumableArray\"\n// module id = 35\n// module chunks = 0","module.exports = require(\"../../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"\")\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./obj/psp.sync.wasm\n// module id = 36\n// module chunks = 0","'use strict'\n\nmodule.exports = function (base64Data) {\n  var isBrowser = typeof window !== 'undefined' && typeof window.atob === 'function'\n  var binary = isBrowser ? window.atob(base64Data) : Buffer.from(base64Data, 'base64').toString('binary')\n  var bytes = new Uint8Array(binary.length)\n\n  for (var i = 0; i < binary.length; ++i) {\n    bytes[i] = binary.charCodeAt(i)\n  }\n\n  return bytes.buffer\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/v625154/work/perspective/node_modules/arraybuffer-loader/lib/to-array-buffer.js\n// module id = 37\n// module chunks = 0","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport {AGGREGATE_DEFAULTS, FILTER_DEFAULTS, SORT_ORDERS, TYPE_AGGREGATES, TYPE_FILTERS, COLUMN_SEPARATOR_STRING} from \"./defaults.js\";\nimport {DateParser, is_valid_date} from \"./date_parser.js\";\nimport {bindall} from \"./utils.js\";\n\nimport {Precision} from \"@apache-arrow/es5-esm/type\";\nimport {Table} from \"@apache-arrow/es5-esm/table\";\nimport {TypeVisitor} from \"@apache-arrow/es5-esm/visitor\";\nimport formatters from \"./view_formatters\";\nimport papaparse from \"papaparse\";\n\n// IE fix - chrono::steady_clock depends on performance.now() which does not exist in IE workers\nif (global.performance === undefined) {\n    global.performance = {now: Date.now};\n}\n\nif (typeof self !== \"undefined\" && self.performance === undefined) {\n    self.performance = {now: Date.now};\n}\n\nconst CHUNKED_THRESHOLD = 100000;\n\nmodule.exports = function(Module) {\n    let __MODULE__ = Module;\n\n    /******************************************************************************\n     *\n     * Private\n     *\n     */\n\n    /**\n     * Infer the t_dtype of a value.\n     * @private\n     * @returns A t_dtype.\n     */\n    function infer_type(x) {\n        let t = __MODULE__.t_dtype.DTYPE_FLOAT64;\n        if (x === null) {\n            t = null;\n        } else if (typeof x === \"number\" && x % 1 === 0 && x < 10000 && x !== 0) {\n            t = __MODULE__.t_dtype.DTYPE_INT32;\n        } else if (typeof x === \"number\") {\n            t = __MODULE__.t_dtype.DTYPE_FLOAT64;\n        } else if (typeof x === \"boolean\") {\n            t = __MODULE__.t_dtype.DTYPE_BOOL;\n        } else if (x instanceof Date) {\n            t = __MODULE__.t_dtype.DTYPE_TIME;\n        } else if (!isNaN(Number(x)) && x !== \"\") {\n            t = __MODULE__.t_dtype.DTYPE_FLOAT64;\n        } else if (typeof x === \"string\" && is_valid_date(x)) {\n            t = __MODULE__.t_dtype.DTYPE_TIME;\n        } else if (typeof x === \"string\") {\n            let lower = x.toLowerCase();\n            if (lower === \"true\" || lower === \"false\") {\n                t = __MODULE__.t_dtype.DTYPE_BOOL;\n            } else {\n                t = __MODULE__.t_dtype.DTYPE_STR;\n            }\n        }\n        return t;\n    }\n\n    /**\n     * Gets human-readable types for a column\n     * @private\n     * @returns {string}\n     */\n    function get_column_type(val) {\n        if (val === 1 || val === 2) {\n            return \"integer\";\n        } else if (val === 19) {\n            return \"string\";\n        } else if (val === 10 || val === 9) {\n            return \"float\";\n        } else if (val === 11) {\n            return \"boolean\";\n        } else if (val === 12) {\n            return \"date\";\n        }\n    }\n\n    /**\n     * Do any necessary data transforms on columns. Currently it does the following\n     * transforms\n     * 1. Date objects are converted into float millis since epoch\n     * 2. Null strings are converted into null values\n     *\n     * @private\n     * @param {string} type type of column\n     * @param {array} data array of columnar data\n     *\n     * @returns transformed array of columnar data\n     */\n    function transform_data(type, data) {\n        let rv = [];\n        for (let x = 0; x < data.length; x++) {\n            let tmp = clean_data(data[x]);\n\n            if (type == __MODULE__.t_dtype.DTYPE_TIME && tmp !== null) {\n                tmp = +data[x];\n            }\n\n            rv.push(tmp);\n        }\n        return rv;\n    }\n\n    /**\n     * Coerce string null into value null\n     * @private\n     * @param {*} value\n     */\n    function clean_data(value) {\n        if (value === null || value === \"null\") {\n            return null;\n        } else {\n            return value;\n        }\n    }\n\n    /**\n     * Converts any supported input type into a canonical representation for\n     * interfacing with perspective.\n     *\n     * @private\n     * @param {object} data See docs\n     * @returns An object with 3 properties:\n     *    names - the column names.\n     *    types - the column t_dtypes.\n     *    cdata - an array of columnar data.\n     */\n    function parse_data(data, names, types) {\n        // todo: refactor, treat columnar/row data as the same to marshal values + fix null handling\n        let preloaded = types ? true : false;\n        if (types === undefined) {\n            types = [];\n        } else {\n            let _types = [];\n            for (let t = 0; t < types.size() - 1; t++) {\n                _types.push(types.get(t));\n            }\n            types = _types;\n        }\n        let cdata = [];\n\n        let row_count = 0;\n\n        if (Array.isArray(data)) {\n            // Row oriented\n            if (data.length === 0) {\n                throw \"Not yet implemented: instantiate empty grid without column type\";\n            }\n            let max_check = 50;\n            if (names === undefined) {\n                names = Object.keys(data[0]);\n                for (let ix = 0; ix < Math.min(max_check, data.length); ix++) {\n                    let next = Object.keys(data[ix]);\n                    if (names.length !== next.length) {\n                        if (next.length > names.length) {\n                            if (max_check === 50) console.warn(\"Array data has inconsistent rows\");\n                            console.warn(\"Extending from \" + names.length + \" to \" + next.length);\n                            names = next;\n                            max_check *= 2;\n                        }\n                    }\n                }\n            }\n            for (let n in names) {\n                let name = names[n];\n                let i = 0,\n                    inferredType = undefined;\n                if (!preloaded) {\n                    while (!inferredType && i < 100 && i < data.length) {\n                        if (data[i].hasOwnProperty(name)) {\n                            inferredType = infer_type(data[i][name]);\n                        }\n                        i++;\n                    }\n                    inferredType = inferredType || __MODULE__.t_dtype.DTYPE_STR;\n                    types.push(inferredType);\n                } else {\n                    inferredType = types[parseInt(n)];\n                }\n                if (inferredType === undefined) {\n                    console.warn(`Could not infer type for column ${name}`);\n                    inferredType = __MODULE__.t_dtype.DTYPE_STR;\n                }\n                let col = [];\n                const parser = new DateParser();\n                for (let x = 0; x < data.length; x++) {\n                    if (!(name in data[x]) || clean_data(data[x][name]) === undefined) {\n                        col.push(undefined);\n                        continue;\n                    }\n                    if (inferredType.value === __MODULE__.t_dtype.DTYPE_FLOAT64.value) {\n                        let val = clean_data(data[x][name]);\n                        if (val !== null) {\n                            val = Number(val);\n                        }\n                        col.push(val);\n                    } else if (inferredType.value === __MODULE__.t_dtype.DTYPE_INT32.value) {\n                        let val = clean_data(data[x][name]);\n                        if (val !== null) val = Number(val);\n                        col.push(val);\n                        if (val > 2147483647 || val < -2147483648) {\n                            types[n] = __MODULE__.t_dtype.DTYPE_FLOAT64;\n                        }\n                    } else if (inferredType.value === __MODULE__.t_dtype.DTYPE_BOOL.value) {\n                        let cell = clean_data(data[x][name]);\n                        if (cell === null) {\n                            col.push(null);\n                            continue;\n                        }\n\n                        if (typeof cell === \"string\") {\n                            if (cell.toLowerCase() === \"true\") {\n                                col.push(true);\n                            } else {\n                                col.push(false);\n                            }\n                        } else {\n                            col.push(!!cell);\n                        }\n                    } else if (inferredType.value === __MODULE__.t_dtype.DTYPE_TIME.value) {\n                        let val = clean_data(data[x][name]);\n                        if (val !== null) {\n                            col.push(parser.parse(val));\n                        } else {\n                            col.push(null);\n                        }\n                    } else {\n                        let val = clean_data(data[x][name]);\n                        // types[types.length - 1].value === 19 ? \"\" : 0\n                        col.push(val === null ? null : \"\" + val); // TODO this is not right - might not be a string.  Need a data cleaner\n                    }\n                }\n                cdata.push(col);\n                row_count = col.length;\n            }\n        } else if (Array.isArray(data[Object.keys(data)[0]])) {\n            // Column oriented update. Extending schema not supported here.\n\n            const names_in_update = Object.keys(data);\n            row_count = data[names_in_update[0]].length;\n            names = names || names_in_update;\n\n            for (let col_num = 0; col_num < names.length; col_num++) {\n                const name = names[col_num];\n\n                // Infer column type if necessary\n                if (!preloaded) {\n                    let i = 0;\n                    let inferredType = null;\n                    while (inferredType === null && i < 100 && i < data[name].length) {\n                        inferredType = infer_type(data[name][i]);\n                        i++;\n                    }\n                    inferredType = inferredType || __MODULE__.t_dtype.DTYPE_STR;\n                    types.push(inferredType);\n                }\n\n                // Extract the data or fill with undefined if column doesn't exist (nothing in column changed)\n                let transformed;\n                if (data.hasOwnProperty(name)) {\n                    transformed = transform_data(types[col_num], data[name]);\n                } else {\n                    transformed = new Array(row_count);\n                }\n                cdata.push(transformed);\n            }\n        } else if (typeof data[Object.keys(data)[0]] === \"string\" || typeof data[Object.keys(data)[0]] === \"function\") {\n            //if (this.initialized) {\n            //  throw \"Cannot update already initialized table with schema.\";\n            // }\n            names = [];\n\n            // Empty type dict\n            for (let name in data) {\n                names.push(name);\n                if (data[name] === \"integer\") {\n                    types.push(__MODULE__.t_dtype.DTYPE_INT32);\n                } else if (data[name] === \"float\") {\n                    types.push(__MODULE__.t_dtype.DTYPE_FLOAT64);\n                } else if (data[name] === \"string\") {\n                    types.push(__MODULE__.t_dtype.DTYPE_STR);\n                } else if (data[name] === \"boolean\") {\n                    types.push(__MODULE__.t_dtype.DTYPE_BOOL);\n                } else if (data[name] === \"date\") {\n                    types.push(__MODULE__.t_dtype.DTYPE_TIME);\n                } else {\n                    throw `Unknown type ${data[name]}`;\n                }\n                cdata.push([]);\n            }\n        } else {\n            throw \"Unknown data type\";\n        }\n\n        return {\n            row_count: row_count,\n            is_arrow: false,\n            names: names,\n            types: types,\n            cdata: cdata\n        };\n    }\n\n    /**\n     * Converts arrow data into a canonical representation for\n     * interfacing with perspective.\n     *\n     * @private\n     * @param {object} data Array buffer\n     * @returns An object with 3 properties:\n     */\n    function load_arrow_buffer(data) {\n        // TODO Need to validate that the names/types passed in match those in the buffer\n        let arrow = Table.from([new Uint8Array(data)]);\n        let loader = arrow.schema.fields.reduce((loader, field, colIdx) => {\n            return loader.loadColumn(field, arrow.getColumnAt(colIdx));\n        }, new ArrowColumnLoader());\n        if (typeof loader.cdata[0].values === \"undefined\") {\n            let nchunks = loader.cdata[0].data.chunkVectors.length;\n            let chunks = [];\n            for (let x = 0; x < nchunks; x++) {\n                chunks.push({\n                    row_count: loader.cdata[0].data.chunkVectors[x].length,\n                    is_arrow: true,\n                    names: loader.names,\n                    types: loader.types,\n                    cdata: loader.cdata.map(y => y.data.chunkVectors[x])\n                });\n            }\n            return chunks;\n        } else {\n            return [\n                {\n                    row_count: arrow.length,\n                    is_arrow: true,\n                    names: loader.names,\n                    types: loader.types,\n                    cdata: loader.cdata\n                }\n            ];\n        }\n    }\n\n    /**\n     *\n     * @private\n     */\n    class ArrowColumnLoader extends TypeVisitor {\n        constructor(cdata, names, types) {\n            super();\n            this.cdata = cdata || [];\n            this.names = names || [];\n            this.types = types || [];\n        }\n        loadColumn(field /*: Arrow.type.Field*/, column /*: Arrow.Vector*/) {\n            if (this.visit(field.type)) {\n                this.cdata.push(column);\n                this.names.push(field.name);\n            }\n            return this;\n        }\n        // visitNull(type/*: Arrow.type.Null*/) {}\n        visitBool(/* type: Arrow.type.Bool */) {\n            this.types.push(__MODULE__.t_dtype.DTYPE_BOOL);\n            return true;\n        }\n        visitInt(type /* : Arrow.type.Int */) {\n            const bitWidth = type.bitWidth;\n            if (bitWidth === 64) {\n                this.types.push(__MODULE__.t_dtype.DTYPE_INT64);\n            } else if (bitWidth === 32) {\n                this.types.push(__MODULE__.t_dtype.DTYPE_INT32);\n            } else if (bitWidth === 16) {\n                this.types.push(__MODULE__.t_dtype.DTYPE_INT16);\n            } else if (bitWidth === 8) {\n                this.types.push(__MODULE__.t_dtype.DTYPE_INT8);\n            }\n            return true;\n        }\n        visitFloat(type /* : Arrow.type.Float */) {\n            const precision = type.precision;\n            if (precision === Precision.DOUBLE) {\n                this.types.push(__MODULE__.t_dtype.DTYPE_FLOAT64);\n            } else if (precision === Precision.SINGLE) {\n                this.types.push(__MODULE__.t_dtype.DTYPE_FLOAT32);\n            }\n            // todo?\n            // else if (type.precision === Arrow.enum_.Precision.HALF) {\n            //     this.types.push(__MODULE__.t_dtype.DTYPE_FLOAT16);\n            // }\n            return true;\n        }\n        visitUtf8(/* type: Arrow.type.Utf8 */) {\n            this.types.push(__MODULE__.t_dtype.DTYPE_STR);\n            return true;\n        }\n        visitBinary(/* type: Arrow.type.Binary */) {\n            this.types.push(__MODULE__.t_dtype.DTYPE_STR);\n            return true;\n        }\n        // visitFixedSizeBinary(type/*: Arrow.type.FixedSizeBinary*/) {}\n        // visitDate(type/*: Arrow.type.Date_*/) {}\n        visitTimestamp(/* type: Arrow.type.Timestamp */) {\n            this.types.push(__MODULE__.t_dtype.DTYPE_TIME);\n            return true;\n        }\n        // visitTime(type/*: Arrow.type.Time*/) {}\n        // visitDecimal(type/*: Arrow.type.Decimal*/) {}\n        // visitList(type/*: Arrow.type.List*/) {}\n        // visitStruct(type/*: Arrow.type.Struct*/) {}\n        // visitUnion(type/*: Arrow.type.Union<any>*/) {}\n        visitDictionary(type /*: Arrow.type.Dictionary */) {\n            return this.visit(type.dictionary);\n        }\n        // visitInterval(type/*: Arrow.type.Interval*/) {}\n        // visitFixedSizeList(type/*: Arrow.type.FixedSizeList*/) {}\n        // visitMap(type/*: Arrow.type.Map_*/) {}\n    }\n\n    /******************************************************************************\n     *\n     * View\n     *\n     */\n\n    /**\n     * A View object represents a specific transform (configuration or pivot,\n     * filter, sort, etc) configuration on an underlying {@link table}. A View\n     * receives all updates from the {@link table} from which it is derived, and\n     * can be serialized to JSON or trigger a callback when it is updated.  View\n     * objects are immutable, and will remain in memory and actively process\n     * updates until its {@link view#delete} method is called.\n     *\n     * <strong>Note</strong> This constructor is not public - Views are created\n     * by invoking the {@link table#view} method.\n     *\n     * @example\n     * // Returns a new View, pivoted in the row space by the \"name\" column.\n     * table.view({row_pivots: [\"name\"]});\n     *\n     * @class\n     * @hideconstructor\n     */\n    function view(pool, ctx, sides, gnode, config, name, callbacks, table) {\n        this.ctx = ctx;\n        this.nsides = sides;\n        this.gnode = gnode;\n        this.config = config || {};\n        this.pool = pool;\n        this.callbacks = callbacks;\n        this.name = name;\n        this.table = table;\n        bindall(this);\n    }\n\n    /**\n     * Delete this {@link view} and clean up all resources associated with it.\n     * View objects do not stop consuming resources or processing updates when\n     * they are garbage collected - you must call this method to reclaim these.\n     */\n    view.prototype.delete = async function() {\n        this.pool.unregister_context(this.gnode.get_id(), this.name);\n        this.ctx.delete();\n        this.table.views.splice(this.table.views.indexOf(this), 1);\n        this.table = undefined;\n        let i = 0,\n            j = 0;\n        while (i < this.callbacks.length) {\n            let val = this.callbacks[i];\n            if (val.view !== this) this.callbacks[j++] = val;\n            i++;\n        }\n        this.callbacks.length = j;\n        if (this._delete_callback) {\n            this._delete_callback();\n        }\n    };\n\n    /**\n     * How many pivoted sides does this view have?\n     *\n     * @private\n     *\n     * @returns {number} sides The number of sides of this `View`.\n     */\n    view.prototype.sides = function() {\n        return this.nsides;\n    };\n\n    view.prototype._column_names = function() {\n        let col_names = [];\n        let aggs = this.ctx.get_column_names();\n        for (let key = 0; key < this.ctx.unity_get_column_count(); key++) {\n            let col_name;\n            if (this.sides() === 0) {\n                col_name = aggs.get(key);\n                if (col_name === \"psp_okey\") {\n                    continue;\n                }\n            } else {\n                let name = aggs.get(key % aggs.size()).name();\n                if (name === \"psp_okey\") {\n                    continue;\n                }\n                let col_path = this.ctx.unity_get_column_path(key + 1);\n                col_name = [];\n                for (let cnix = 0; cnix < col_path.size(); cnix++) {\n                    col_name.push(__MODULE__.scalar_vec_to_val(col_path, cnix));\n                }\n                col_name = col_name.reverse();\n                col_name.push(name);\n                col_name = col_name.join(COLUMN_SEPARATOR_STRING);\n                col_path.delete();\n            }\n            col_names.push(col_name);\n        }\n        aggs.delete();\n        return col_names;\n    };\n\n    /**\n     * The schema of this {@link view}.  A schema is an Object, the keys of which\n     * are the columns of this {@link view}, and the values are their string type names.\n     * If this {@link view} is aggregated, theses will be the aggregated types;\n     * otherwise these types will be the same as the columns in the underlying\n     * {@link table}\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this {@link view}'s schema.\n     */\n    view.prototype.schema = async function() {\n        // get type mapping\n        let schema = this.gnode.get_tblschema();\n        let _types = schema.types();\n        let names = schema.columns();\n        schema.delete();\n\n        let types = {};\n        for (let i = 0; i < names.size(); i++) {\n            types[names.get(i)] = _types.get(i).value;\n        }\n        let new_schema = {};\n        let col_names = this._column_names();\n        for (let col_name of col_names) {\n            col_name = col_name.split(COLUMN_SEPARATOR_STRING);\n            col_name = col_name[col_name.length - 1];\n            if (types[col_name] === 1 || types[col_name] === 2) {\n                new_schema[col_name] = \"integer\";\n            } else if (types[col_name] === 19) {\n                new_schema[col_name] = \"string\";\n            } else if (types[col_name] === 9 || types[col_name] === 10) {\n                new_schema[col_name] = \"float\";\n            } else if (types[col_name] === 11) {\n                new_schema[col_name] = \"boolean\";\n            } else if (types[col_name] === 12) {\n                new_schema[col_name] = \"date\";\n            }\n            if (this.sides() > 0 && this.config.row_pivot.length > 0) {\n                new_schema[col_name] = map_aggregate_types(col_name, new_schema[col_name], this.config.aggregate);\n            }\n        }\n\n        _types.delete();\n        names.delete();\n\n        return new_schema;\n    };\n\n    const map_aggregate_types = function(col_name, orig_type, aggregate) {\n        const INTEGER_AGGS = [\"distinct count\", \"distinctcount\", \"distinct\", \"count\"];\n        const FLOAT_AGGS = [\"avg\", \"mean\", \"mean by count\", \"weighted_mean\", \"pct sum parent\", \"pct sum grand total\"];\n\n        for (let agg in aggregate) {\n            let found_agg = aggregate[agg];\n            if (found_agg.column.join(COLUMN_SEPARATOR_STRING) === col_name) {\n                if (INTEGER_AGGS.includes(found_agg.op)) {\n                    return \"integer\";\n                } else if (FLOAT_AGGS.includes(found_agg.op)) {\n                    return \"float\";\n                }\n            }\n        }\n        return orig_type;\n    };\n\n    const to_format = async function(options, formatter) {\n        options = options || {};\n        let viewport = this.config.viewport ? this.config.viewport : {};\n        let start_row = options.start_row || (viewport.top ? viewport.top : 0);\n        let end_row = options.end_row || (viewport.height ? start_row + viewport.height : this.ctx.get_row_count());\n        let start_col = options.start_col || (viewport.left ? viewport.left : 0);\n        let end_col = options.end_col || (viewport.width ? start_row + viewport.width : this.ctx.unity_get_column_count() + (this.sides() === 0 ? 0 : 1));\n        let slice;\n        if (this.config.row_pivot[0] === \"psp_okey\") {\n            end_row += this.config.column_pivot.length;\n        }\n        if (this.sides() === 0) {\n            slice = __MODULE__.get_data_zero(this.ctx, start_row, end_row, start_col, end_col);\n        } else if (this.sides() === 1) {\n            slice = __MODULE__.get_data_one(this.ctx, start_row, end_row, start_col, end_col);\n        } else {\n            slice = __MODULE__.get_data_two(this.ctx, start_row, end_row, start_col, end_col);\n        }\n\n        let data = formatter.initDataValue();\n\n        let col_names = [[]].concat(this._column_names());\n        let row;\n        let ridx = -1;\n        for (let idx = 0; idx < slice.length; idx++) {\n            let cidx = idx % (end_col - start_col);\n            if (cidx === 0) {\n                if (row) {\n                    formatter.addRow(data, row);\n                }\n                row = formatter.initRowValue();\n                ridx++;\n            }\n            if (this.sides() === 0) {\n                let col_name = col_names[start_col + cidx + 1];\n                formatter.setColumnValue(data, row, col_name, slice[idx]);\n            } else {\n                if (cidx === 0) {\n                    if (this.config.row_pivot[0] !== \"psp_okey\") {\n                        let col_name = \"__ROW_PATH__\";\n                        let row_path = this.ctx.unity_get_row_path(start_row + ridx);\n                        formatter.initColumnValue(data, row, col_name);\n                        for (let i = 0; i < row_path.size(); i++) {\n                            const value = __MODULE__.scalar_vec_to_val(row_path, i);\n                            formatter.addColumnValue(data, row, col_name, value);\n                        }\n                        row_path.delete();\n                    }\n                } else {\n                    let col_name = col_names[start_col + cidx];\n                    formatter.setColumnValue(data, row, col_name, slice[idx]);\n                }\n            }\n        }\n\n        if (row) {\n            formatter.addRow(data, row);\n        }\n        if (this.config.row_pivot[0] === \"psp_okey\") {\n            data = formatter.slice(data, this.config.column_pivot.length);\n        }\n\n        return formatter.formatData(data, options.config);\n    };\n\n    /**\n     * Serializes this view to JSON data in a column-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which\n     * to serialize.\n     * @param {number} options.end_row The ending row index from which\n     * to serialize.\n     * @param {number} options.start_col The starting column index from which\n     * to serialize.\n     * @param {number} options.end_col The ending column index from which\n     * to serialize.\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link view}.  If this {@link view} had a\n     * \"row_pivots\" config parameter supplied when constructed, each row Object\n     * will have a \"__ROW_PATH__\" key, whose value specifies this row's\n     * aggregated path.  If this {@link view} had a \"column_pivots\" config\n     * parameter supplied, the keys of this object will be comma-prepended with\n     * their comma-separated column paths.\n     */\n    view.prototype.to_columns = async function(options) {\n        return to_format.call(this, options, formatters.jsonTableFormatter);\n    };\n\n    /**\n     * Serializes this view to JSON data in a row-oriented format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which\n     * to serialize.\n     * @param {number} options.end_row The ending row index from which\n     * to serialize.\n     * @param {number} options.start_col The starting column index from which\n     * to serialize.\n     * @param {number} options.end_col The ending column index from which\n     * to serialize.\n     *\n     * @returns {Promise<Array>} A Promise resolving to An array of Objects\n     * representing the rows of this {@link view}.  If this {@link view} had a\n     * \"row_pivots\" config parameter supplied when constructed, each row Object\n     * will have a \"__ROW_PATH__\" key, whose value specifies this row's\n     * aggregated path.  If this {@link view} had a \"column_pivots\" config\n     * parameter supplied, the keys of this object will be comma-prepended with\n     * their comma-separated column paths.\n     */\n    view.prototype.to_json = async function(options) {\n        return to_format.call(this, options, formatters.jsonFormatter);\n    };\n\n    /**\n     * Serializes this view to CSV data in a standard format.\n     *\n     * @async\n     *\n     * @param {Object} [options] An optional configuration object.\n     * @param {number} options.start_row The starting row index from which\n     * to serialize.\n     * @param {number} options.end_row The ending row index from which\n     * to serialize.\n     * @param {number} options.start_col The starting column index from which\n     * to serialize.\n     * @param {number} options.end_col The ending column index from which\n     * to serialize.\n     * @param {Object} options.config A config object for the Papaparse {@link https://www.papaparse.com/docs#json-to-csv}\n     * config object.\n     *\n     * @returns {Promise<string>} A Promise resolving to a string in CSV format\n     * representing the rows of this {@link view}.  If this {@link view} had a\n     * \"row_pivots\" config parameter supplied when constructed, each row\n     * will have prepended those values specified by this row's\n     * aggregated path.  If this {@link view} had a \"column_pivots\" config\n     * parameter supplied, the keys of this object will be comma-prepended with\n     * their comma-separated column paths.\n     */\n    view.prototype.to_csv = async function(options) {\n        return to_format.call(this, options, formatters.csvFormatter);\n    };\n\n    /**\n     * The number of aggregated rows in this {@link view}.  This is affected by\n     * the \"row_pivots\" configuration parameter supplied to this {@link view}'s\n     * contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated rows.\n     */\n    view.prototype.num_rows = async function() {\n        return this.ctx.get_row_count();\n    };\n\n    /**\n     * The number of aggregated columns in this {@link view}.  This is affected by\n     * the \"column_pivots\" configuration parameter supplied to this {@link view}'s\n     * contructor.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of aggregated columns.\n     */\n    view.prototype.num_columns = async function() {\n        return this.ctx.unity_get_column_count();\n    };\n\n    /**\n     * Whether this row at index `idx` is in an expanded or collapsed state.\n     *\n     * @async\n     *\n     * @returns {Promise<bool>} Whether this row is expanded.\n     */\n    view.prototype.get_row_expanded = async function(idx) {\n        return this.ctx.unity_get_row_expanded(idx);\n    };\n\n    /**\n     * Expands the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.expand = async function(idx) {\n        if (this.nsides === 2 && this.ctx.unity_get_row_depth(idx) < this.config.row_pivot.length) {\n            return this.ctx.open(__MODULE__.t_header.HEADER_ROW, idx);\n        } else if (this.nsides < 2) {\n            return this.ctx.open(idx);\n        }\n    };\n\n    /**\n     * Collapses the row at index `idx`.\n     *\n     * @async\n     *\n     * @returns {Promise<void>}\n     */\n    view.prototype.collapse = async function(idx) {\n        if (this.nsides === 2) {\n            return this.ctx.close(__MODULE__.t_header.HEADER_ROW, idx);\n        } else {\n            return this.ctx.close(idx);\n        }\n    };\n\n    /**\n     * Expand the tree down to `depth`.\n     *\n     */\n    view.prototype.expand_to_depth = async function(depth) {\n        if (this.config.row_pivot.length >= depth) {\n            if (this.nsides === 2) {\n                return this.ctx.expand_to_depth(__MODULE__.t_header.HEADER_ROW, depth);\n            } else {\n                return this.ctx.expand_to_depth(depth);\n            }\n        } else {\n            console.warn(`Cannot expand past ${this.config.row_pivot.length}`);\n        }\n    };\n\n    /**\n     * Collapse the tree down to `depth`.\n     *\n     */\n    view.prototype.collapse_to_depth = async function(depth) {\n        if (this.config.row_pivot.length >= depth) {\n            if (this.nsides === 2) {\n                return this.ctx.collapse_to_depth(__MODULE__.t_header.HEADER_ROW, depth);\n            } else {\n                return this.ctx.collapse_to_depth(depth);\n            }\n        } else {\n            console.warn(`Cannot collapse past ${this.config.row_pivot.length}`);\n        }\n    };\n\n    /**\n     * Register a callback with this {@link view}.  Whenever the {@link view}'s\n     * underlying table emits an update, this callback will be invoked with the\n     * aggregated row deltas.\n     *\n     * @param {function} callback A callback function invoked on update.  The\n     * parameter to this callback shares a structure with the return type of\n     * {@link view#to_json}.\n     */\n    view.prototype.on_update = function(callback) {\n        this.callbacks.push({\n            view: this,\n            callback: () => {\n                if (this.ctx.get_step_delta) {\n                    let delta = this.ctx.get_step_delta(0, 2147483647);\n                    if (delta.cells.size() === 0) {\n                        this.to_json().then(callback);\n                    } else {\n                        let rows = {};\n                        for (let x = 0; x < delta.cells.size(); x++) {\n                            rows[delta.cells.get(x).row] = true;\n                        }\n                        rows = Object.keys(rows);\n                        Promise.all(\n                            rows.map(row =>\n                                this.to_json({\n                                    start_row: Number.parseInt(row),\n                                    end_row: Number.parseInt(row) + 1\n                                })\n                            )\n                        ).then(results => callback([].concat.apply([], results)));\n                    }\n                } else {\n                    callback();\n                }\n            }\n        });\n    };\n\n    /**\n     * Register a callback with this {@link view}.  Whenever the {@link view}\n     * is deleted, this callback will be invoked.\n     *\n     * @param {function} callback A callback function invoked on update.  The\n     *     parameter to this callback shares a structure with the return type of\n     *     {@link view#to_json}.\n     */\n    view.prototype.on_delete = function(callback) {\n        this._delete_callback = callback;\n    };\n\n    /******************************************************************************\n     *\n     * Table\n     *\n     */\n\n    /**\n     * A Table object is the basic data container in Perspective.  Tables are\n     * typed - they have an immutable set of column names, and a known type for\n     * each.\n     *\n     * <strong>Note</strong> This constructor is not public - Tables are created\n     * by invoking the {@link table} factory method, either on the perspective\n     * module object, or an a {@link worker} instance.\n     *\n     * @class\n     * @hideconstructor\n     */\n    function table(gnode, pool, index, computed, limit, limit_index) {\n        this.gnode = gnode;\n        this.pool = pool;\n        this.name = Math.random() + \"\";\n        this.initialized = false;\n        this.index = index;\n        this.pool.set_update_delegate(this);\n        this.computed = computed || [];\n        this.callbacks = [];\n        this.views = [];\n        this.limit = limit;\n        this.limit_index = limit_index;\n        bindall(this);\n    }\n\n    table.prototype._update_callback = function() {\n        for (let e in this.callbacks) {\n            this.callbacks[e].callback();\n        }\n    };\n\n    table.prototype._calculate_computed = function(tbl, computed_defs) {\n        // tbl is the pointer to the C++ t_table\n\n        for (let i = 0; i < computed_defs.length; ++i) {\n            let coldef = computed_defs[i];\n            let name = coldef[\"column\"];\n            let func = coldef[\"func\"];\n            let inputs = coldef[\"inputs\"];\n            let type = coldef[\"type\"] || \"string\";\n\n            let dtype;\n            switch (type) {\n                case \"integer\":\n                    dtype = __MODULE__.t_dtype.DTYPE_INT32;\n                    break;\n                case \"float\":\n                    dtype = __MODULE__.t_dtype.DTYPE_FLOAT64;\n                    break;\n                case \"boolean\":\n                    dtype = __MODULE__.t_dtype.DTYPE_BOOL;\n                    break;\n                case \"date\":\n                    dtype = __MODULE__.t_dtype.DTYPE_TIME;\n                    break;\n                case \"string\":\n                default:\n                    dtype = __MODULE__.t_dtype.DTYPE_STR;\n                    break;\n            }\n\n            __MODULE__.table_add_computed_column(tbl, name, dtype, func, inputs);\n        }\n    };\n\n    /**\n     * Delete this {@link table} and clean up all resources associated with it.\n     * Table objects do not stop consuming resources or processing updates when\n     * they are garbage collected - you must call this method to reclaim these.\n     */\n    table.prototype.delete = function() {\n        if (this.views.length > 0) {\n            throw \"Table still has contexts - refusing to delete.\";\n        }\n        this.pool.unregister_gnode(this.gnode.get_id());\n        this.gnode.delete();\n        this.pool.delete();\n        if (this._delete_callback) {\n            this._delete_callback();\n        }\n    };\n\n    /**\n     * Register a callback with this {@link table}.  Whenever the {@link view}\n     * is deleted, this callback will be invoked.\n     *\n     * @param {function} callback A callback function invoked on update.  The\n     *     parameter to this callback shares a structure with the return type of\n     *     {@link table#to_json}.\n     */\n    table.prototype.on_delete = function(callback) {\n        this._delete_callback = callback;\n    };\n\n    /**\n     * The number of accumulated rows in this {@link table}.  This is affected by\n     * the \"index\" configuration parameter supplied to this {@link view}'s\n     * contructor - as rows will be overwritten when they share an idnex column.\n     *\n     * @async\n     *\n     * @returns {Promise<number>} The number of accumulated rows.\n     */\n    table.prototype.size = async function() {\n        return this.gnode.get_table().size();\n    };\n\n    table.prototype._schema = function() {\n        let schema = this.gnode.get_tblschema();\n        let columns = schema.columns();\n        let types = schema.types();\n        let new_schema = {};\n        for (let key = 0; key < columns.size(); key++) {\n            if (columns.get(key) === \"psp_okey\") {\n                continue;\n            }\n            new_schema[columns.get(key)] = get_column_type(types.get(key).value);\n        }\n        schema.delete();\n        columns.delete();\n        types.delete();\n        return new_schema;\n    };\n\n    /**\n     * The schema of this {@link table}.  A schema is an Object whose keys are the\n     * columns of this {@link table}, and whose values are their string type names.\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this {@link table}'s schema.\n     */\n    table.prototype.schema = async function() {\n        return this._schema();\n    };\n\n    table.prototype._computed_schema = function() {\n        let computed = this.computed;\n\n        if (computed.length < 0) return {};\n\n        let schema = this.gnode.get_tblschema();\n        let columns = schema.columns();\n        let types = schema.types();\n\n        let computed_schema = {};\n\n        for (let i = 0; i < computed.length; i++) {\n            const column_name = computed[i].column;\n            const column_type = computed[i].type;\n\n            const column = {};\n\n            column.type = column_type;\n            column.input_columns = computed[i].inputs;\n            column.input_type = computed[i].input_type;\n            column.computation = computed[i].computation;\n\n            computed_schema[column_name] = column;\n        }\n\n        schema.delete();\n        columns.delete();\n        types.delete();\n        return computed_schema;\n    };\n\n    /**\n     * The computed schema of this {@link table}. Returns a schema of only computed\n     * columns added by the user, the keys of which are computed columns and the values an\n     * Object containing the associated column_name, column_type, and computation.\n     *\n     * @async\n     *\n     * @returns {Promise<Object>} A Promise of this {@link table}'s computed schema.\n     */\n    table.prototype.computed_schema = async function() {\n        return this._computed_schema();\n    };\n\n    /**\n     * Create a new {@link view} from this table with a specified\n     * configuration.\n     *\n     * @param {Object} [config] The configuration object for this {@link view}.\n     * @param {Array<string>} [config.row_pivot] An array of column names\n     * to use as {@link https://en.wikipedia.org/wiki/Pivot_table#Row_labels Row Pivots}.\n     * @param {Array<string>} [config.column_pivot] An array of column names\n     * to use as {@link https://en.wikipedia.org/wiki/Pivot_table#Column_labels Column Pivots}.\n     * @param {Array<Object>} [config.aggregate] An Array of Aggregate configuration objects,\n     * each of which should provide an \"name\" and \"op\" property, repsresnting the string\n     * aggregation type and associated column name, respectively.  Aggregates not provided\n     * will use their type defaults\n     * @param {Array<Array<string>>} [config.filter] An Array of Filter configurations to\n     * apply.  A filter configuration is an array of 3 elements:  A column name,\n     * a supported filter comparison string (e.g. '===', '>'), and a value to compare.\n     * @param {Array<string>} [config.sort] An Array of column names by which to sort.\n     *\n     * @example\n     * var view = table.view({\n     *      row_pivot: ['region'],\n     *      aggregate: [{op: 'dominant', column:'region'}],\n     *      filter: [['client', 'contains', 'fred']],\n     *      sort: ['value']\n     * });\n     *\n     * @returns {view} A new {@link view} object for the supplied configuration,\n     * bound to this table\n     */\n    table.prototype.view = function(config) {\n        config = {...config};\n\n        const _string_to_filter_op = {\n            \"&\": __MODULE__.t_filter_op.FILTER_OP_AND,\n            \"|\": __MODULE__.t_filter_op.FILTER_OP_OR,\n            \"<\": __MODULE__.t_filter_op.FILTER_OP_LT,\n            \">\": __MODULE__.t_filter_op.FILTER_OP_GT,\n            \"==\": __MODULE__.t_filter_op.FILTER_OP_EQ,\n            contains: __MODULE__.t_filter_op.FILTER_OP_CONTAINS,\n            \"<=\": __MODULE__.t_filter_op.FILTER_OP_LTEQ,\n            \">=\": __MODULE__.t_filter_op.FILTER_OP_GTEQ,\n            \"!=\": __MODULE__.t_filter_op.FILTER_OP_NE,\n            \"begins with\": __MODULE__.t_filter_op.FILTER_OP_BEGINS_WITH,\n            \"ends with\": __MODULE__.t_filter_op.FILTER_OP_ENDS_WITH,\n            or: __MODULE__.t_filter_op.FILTER_OP_OR,\n            in: __MODULE__.t_filter_op.FILTER_OP_IN,\n            \"not in\": __MODULE__.t_filter_op.FILTER_OP_NOT_IN,\n            and: __MODULE__.t_filter_op.FILTER_OP_AND,\n            \"is nan\": __MODULE__.t_filter_op.FILTER_OP_IS_NAN,\n            \"is not nan\": __MODULE__.t_filter_op.FILTER_OP_IS_NOT_NAN\n        };\n\n        const _string_to_aggtype = {\n            \"distinct count\": __MODULE__.t_aggtype.AGGTYPE_DISTINCT_COUNT,\n            distinctcount: __MODULE__.t_aggtype.AGGTYPE_DISTINCT_COUNT,\n            distinct: __MODULE__.t_aggtype.AGGTYPE_DISTINCT_COUNT,\n            sum: __MODULE__.t_aggtype.AGGTYPE_SUM,\n            mul: __MODULE__.t_aggtype.AGGTYPE_MUL,\n            avg: __MODULE__.t_aggtype.AGGTYPE_MEAN,\n            mean: __MODULE__.t_aggtype.AGGTYPE_MEAN,\n            count: __MODULE__.t_aggtype.AGGTYPE_COUNT,\n            \"weighted mean\": __MODULE__.t_aggtype.AGGTYPE_WEIGHTED_MEAN,\n            unique: __MODULE__.t_aggtype.AGGTYPE_UNIQUE,\n            any: __MODULE__.t_aggtype.AGGTYPE_ANY,\n            median: __MODULE__.t_aggtype.AGGTYPE_MEDIAN,\n            join: __MODULE__.t_aggtype.AGGTYPE_JOIN,\n            div: __MODULE__.t_aggtype.AGGTYPE_SCALED_DIV,\n            add: __MODULE__.t_aggtype.AGGTYPE_SCALED_ADD,\n            dominant: __MODULE__.t_aggtype.AGGTYPE_DOMINANT,\n            \"first by index\": __MODULE__.t_aggtype.AGGTYPE_FIRST,\n            \"last by index\": __MODULE__.t_aggtype.AGGTYPE_LAST,\n            and: __MODULE__.t_aggtype.AGGTYPE_AND,\n            or: __MODULE__.t_aggtype.AGGTYPE_OR,\n            last: __MODULE__.t_aggtype.AGGTYPE_LAST_VALUE,\n            high: __MODULE__.t_aggtype.AGGTYPE_HIGH_WATER_MARK,\n            low: __MODULE__.t_aggtype.AGGTYPE_LOW_WATER_MARK,\n            \"sum abs\": __MODULE__.t_aggtype.AGGTYPE_SUM_ABS,\n            \"sum not null\": __MODULE__.t_aggtype.AGGTYPE_SUM_NOT_NULL,\n            \"mean by count\": __MODULE__.t_aggtype.AGGTYPE_MEAN_BY_COUNT,\n            identity: __MODULE__.t_aggtype.AGGTYPE_IDENTITY,\n            \"distinct leaf\": __MODULE__.t_aggtype.AGGTYPE_DISTINCT_LEAF,\n            \"pct sum parent\": __MODULE__.t_aggtype.AGGTYPE_PCT_SUM_PARENT,\n            \"pct sum grand total\": __MODULE__.t_aggtype.AGGTYPE_PCT_SUM_GRAND_TOTAL\n        };\n\n        let name = Math.random() + \"\";\n\n        config.row_pivot = config.row_pivot || [];\n        config.column_pivot = config.column_pivot || [];\n\n        // Column only mode\n        if (config.row_pivot.length === 0 && config.column_pivot.length > 0) {\n            config.row_pivot = [\"psp_okey\"];\n            config.column_only = true;\n        }\n\n        // Filters\n        let filters = [];\n        let filter_op = __MODULE__.t_filter_op.FILTER_OP_AND;\n\n        if (config.filter) {\n            let schema = this._schema();\n            filters = config.filter.map(function(filter) {\n                if (schema[filter[0]] === \"date\") {\n                    return [filter[0], _string_to_filter_op[filter[1]], +new DateParser().parse(filter[2])];\n                } else {\n                    return [filter[0], _string_to_filter_op[filter[1]], filter[2]];\n                }\n            });\n            if (config.filter_op) {\n                filter_op = _string_to_filter_op[config.filter_op];\n            }\n        }\n\n        // Sort\n        let sort = [];\n        if (config.sort) {\n            sort = config.sort.map(x => {\n                if (!Array.isArray(x)) {\n                    return [config.aggregate.map(agg => agg.column).indexOf(x), 1];\n                } else {\n                    return [config.aggregate.map(agg => agg.column).indexOf(x[0]), SORT_ORDERS.indexOf(x[1])];\n                }\n            });\n            if (config.column_pivot.length > 0 && config.row_pivot.length > 0) {\n                config.sort = config.sort.filter(x => config.row_pivot.indexOf(x[0]) === -1);\n            }\n        }\n\n        // Row Pivots\n        let aggregates = [];\n        if (typeof config.aggregate === \"object\") {\n            for (let aidx = 0; aidx < config.aggregate.length; aidx++) {\n                let agg = config.aggregate[aidx];\n                let agg_op = _string_to_aggtype[agg.op];\n                if (config.column_only) {\n                    agg_op = __MODULE__.t_aggtype.AGGTYPE_ANY;\n                    config.aggregate[aidx].op = \"any\";\n                }\n                if (typeof agg.column === \"string\") {\n                    agg.column = [agg.column];\n                } else {\n                    let dep_length = agg.column.length;\n                    if ((agg.op === \"weighted mean\" && dep_length != 2) || (agg.op !== \"weighted mean\" && dep_length != 1)) {\n                        throw `'${agg.op}' has incorrect arity ('${dep_length}') for column dependencies.`;\n                    }\n                }\n                aggregates.push([agg.name || agg.column.join(COLUMN_SEPARATOR_STRING), agg_op, agg.column]);\n            }\n        } else {\n            let agg_op = __MODULE__.t_aggtype.AGGTYPE_DISTINCT_COUNT;\n            if (config.column_only) {\n                agg_op = __MODULE__.t_aggtype.AGGTYPE_ANY;\n            }\n            let schema = this.gnode.get_tblschema();\n            let t_aggs = schema.columns();\n            for (let aidx = 0; aidx < t_aggs.size(); aidx++) {\n                let column = t_aggs.get(aidx);\n                if (column !== \"psp_okey\") {\n                    aggregates.push([column, agg_op, [column]]);\n                }\n            }\n            schema.delete();\n            t_aggs.delete();\n        }\n\n        let context;\n        let sides = 0;\n        if (config.row_pivot.length > 0 || config.column_pivot.length > 0) {\n            if (config.column_pivot && config.column_pivot.length > 0) {\n                config.row_pivot = config.row_pivot || [];\n                context = __MODULE__.make_context_two(this.gnode, config.row_pivot, config.column_pivot, filter_op, filters, aggregates, []);\n                sides = 2;\n                this.pool.register_context(this.gnode.get_id(), name, __MODULE__.t_ctx_type.TWO_SIDED_CONTEXT, context.$$.ptr);\n\n                if (config.row_pivot_depth !== undefined) {\n                    context.expand_to_depth(__MODULE__.t_header.HEADER_ROW, config.row_pivot_depth - 1);\n                } else {\n                    context.expand_to_depth(__MODULE__.t_header.HEADER_ROW, config.row_pivot.length);\n                }\n\n                if (config.column_pivot_depth !== undefined) {\n                    context.expand_to_depth(__MODULE__.t_header.HEADER_COLUMN, config.column_pivot_depth - 1);\n                } else {\n                    context.expand_to_depth(__MODULE__.t_header.HEADER_COLUMN, config.column_pivot.length);\n                }\n\n                const groups = context.unity_get_column_count() / aggregates.length;\n                const new_sort = [];\n\n                for (let z = 0; z < groups; z++) {\n                    for (let s of sort) {\n                        new_sort.push([s[0] + z * aggregates.length, s[1]]);\n                    }\n                }\n\n                if (sort.length > 0) {\n                    __MODULE__.sort(context, new_sort);\n                }\n            } else {\n                context = __MODULE__.make_context_one(this.gnode, config.row_pivot, filter_op, filters, aggregates, sort);\n                sides = 1;\n                this.pool.register_context(this.gnode.get_id(), name, __MODULE__.t_ctx_type.ONE_SIDED_CONTEXT, context.$$.ptr);\n\n                if (config.row_pivot_depth !== undefined) {\n                    context.expand_to_depth(config.row_pivot_depth - 1);\n                } else {\n                    context.expand_to_depth(config.row_pivot.length);\n                }\n            }\n        } else {\n            context = __MODULE__.make_context_zero(\n                this.gnode,\n                filter_op,\n                filters,\n                aggregates.map(function(x) {\n                    return x[0];\n                }),\n                sort\n            );\n            this.pool.register_context(this.gnode.get_id(), name, __MODULE__.t_ctx_type.ZERO_SIDED_CONTEXT, context.$$.ptr);\n        }\n\n        let v = new view(this.pool, context, sides, this.gnode, config, name, this.callbacks, this);\n        this.views.push(v);\n        return v;\n    };\n\n    /**\n     * Updates the rows of a {@link table}.  Updated rows are pushed down to any\n     * derived {@link view} objects.\n     *\n     * @param {Object<string, Array>|Array<Object>|string} data The input data\n     * for this table.  The supported input types mirror the constructor options, minus\n     * the ability to pass a schema (Object<string, string>) as this table has.\n     * already been constructed, thus its types are set in stone.\n     *\n     * @see {@link table}\n     */\n    table.prototype.update = function(data) {\n        let pdata;\n        let cols = this._columns();\n        let schema = this.gnode.get_tblschema();\n        let names = schema.columns();\n        let types = schema.types();\n\n        if (data instanceof ArrayBuffer) {\n            pdata = load_arrow_buffer(data, cols, types);\n        } else {\n            pdata = [parse_data(data, cols, types)];\n        }\n\n        for (let i = names.size() - 1; i >= 0; i--) {\n            if (cols.indexOf(names.get(i)) === -1) {\n                for (let chunk of pdata) {\n                    chunk.types.splice(i, 1);\n                }\n            }\n        }\n\n        let tbl;\n        try {\n            for (let chunk of pdata) {\n                tbl = __MODULE__.make_table(chunk.row_count || 0, chunk.names, chunk.types, chunk.cdata, this.limit_index, this.limit || 4294967295, this.index || \"\", chunk.is_arrow, false);\n\n                this.limit_index += chunk.cdata[0].length;\n                if (this.limit) {\n                    this.limit_index = this.limit_index % this.limit;\n                }\n\n                // Add any computed columns\n                this._calculate_computed(tbl, this.computed);\n\n                __MODULE__.fill(this.pool, this.gnode, tbl);\n                this.initialized = true;\n            }\n        } catch (e) {\n            console.error(e);\n        } finally {\n            if (tbl) {\n                tbl.delete();\n            }\n            schema.delete();\n            names.delete();\n            types.delete();\n        }\n    };\n\n    /**\n     * Removes the rows of a {@link table}.  Removed rows are pushed down to any\n     * derived {@link view} objects.\n     *\n     * @param {Array<Object>} data An array of primary keys to remove.\n     *\n     * @see {@link table}\n     */\n    table.prototype.remove = function(data) {\n        let pdata;\n        let schema = this.gnode.get_tblschema();\n        let types = schema.types();\n        schema.delete();\n\n        data = data.map(idx => ({[this.index]: idx}));\n\n        if (data instanceof ArrayBuffer) {\n            pdata = load_arrow_buffer(data, [this.index], types);\n        } else {\n            pdata = [parse_data(data, [this.index], types)];\n        }\n\n        let tbl;\n        try {\n            for (let chunk of pdata) {\n                tbl = __MODULE__.make_table(chunk.row_count || 0, chunk.names, chunk.types, chunk.cdata, this.limit_index, this.limit || 4294967295, this.index || \"\", chunk.is_arrow, true);\n\n                this.limit_index += chunk.cdata[0].length;\n                if (this.limit) {\n                    this.limit_index = this.limit_index % this.limit;\n                }\n\n                __MODULE__.fill(this.pool, this.gnode, tbl);\n                this.initialized = true;\n            }\n        } catch (e) {\n            console.error(e);\n        } finally {\n            if (tbl) {\n                tbl.delete();\n            }\n            types.delete();\n        }\n    };\n\n    /**\n     * Create a new table with the addition of new computed columns (defined as javascript functions)\n     */\n    table.prototype.add_computed = function(computed) {\n        let pool, gnode, tbl;\n\n        try {\n            // Create perspective pool\n            pool = new __MODULE__.t_pool({_update_callback: function() {}});\n\n            // Pull out the t_table from the current gnode\n            tbl = __MODULE__.clone_gnode_table(this.gnode);\n\n            // Add new computed columns in place to tbl\n            this._calculate_computed(tbl, computed);\n\n            gnode = __MODULE__.make_gnode(tbl);\n            pool.register_gnode(gnode);\n            __MODULE__.fill(pool, gnode, tbl);\n\n            // Merge in definition of previous computed columns\n            if (this.computed.length > 0) {\n                computed = this.computed.concat(computed);\n            }\n\n            return new table(gnode, pool, this.index, computed, this.limit, this.limit_index);\n        } catch (e) {\n            if (pool) {\n                pool.delete();\n            }\n            if (gnode) {\n                gnode.delete();\n            }\n            throw e;\n        } finally {\n            if (tbl) {\n                tbl.delete();\n            }\n        }\n    };\n\n    table.prototype._columns = function() {\n        let schema = this.gnode.get_tblschema();\n        let computed_schema = this._computed_schema();\n        let cols = schema.columns();\n        let names = [];\n        for (let cidx = 0; cidx < cols.size(); cidx++) {\n            let name = cols.get(cidx);\n            if (name !== \"psp_okey\" && typeof computed_schema[name] === \"undefined\") {\n                names.push(name);\n            }\n        }\n        schema.delete();\n        cols.delete();\n        return names;\n    };\n\n    /**\n     * The column names of this table.\n     *\n     * @async\n     *\n     * @returns {Array<string>} An array of column names for this table.\n     */\n    table.prototype.columns = async function() {\n        return this._columns();\n    };\n\n    table.prototype._column_metadata = function() {\n        let schema = this.gnode.get_tblschema();\n        let computed_schema = this._computed_schema();\n        let cols = schema.columns();\n        let types = schema.types();\n\n        let metadata = [];\n        for (let cidx = 0; cidx < cols.size(); cidx++) {\n            let name = cols.get(cidx);\n            let meta = {};\n\n            if (name === \"psp_okey\") {\n                continue;\n            }\n\n            meta.name = name;\n            meta.type = get_column_type(types.get(cidx).value);\n\n            let computed_col = computed_schema[name];\n\n            if (computed_col !== undefined) {\n                meta.computed = {\n                    input_columns: computed_col.input_columns,\n                    input_type: computed_col.input_type,\n                    computation: computed_col.computation\n                };\n            } else {\n                meta.computed = undefined;\n            }\n\n            metadata.push(meta);\n        }\n\n        types.delete();\n        cols.delete();\n        schema.delete();\n\n        return metadata;\n    };\n\n    /**\n     * Column metadata for this table.\n     *\n     * If the column is computed, the `computed` property is an Object containing:\n     *  - Array `input_columns`\n     *  - String `input_type`\n     *  - Object `computation`.\n     *\n     *  Otherwise, `computed` is `undefined`.\n     *\n     * @async\n     *\n     * @returns {Array<object>} An array of Objects containing metadata for each column.\n     */\n    table.prototype.column_metadata = function() {\n        return this._column_metadata();\n    };\n\n    table.prototype.execute = function(f) {\n        f(this);\n    };\n\n    /******************************************************************************\n     *\n     * Worker API\n     *\n     */\n\n    function error_to_json(error) {\n        const obj = {};\n        if (typeof error !== \"string\") {\n            Object.getOwnPropertyNames(error).forEach(key => {\n                obj[key] = error[key];\n            }, error);\n        } else {\n            obj[\"message\"] = error;\n        }\n        return obj;\n    }\n\n    class Host {\n        constructor() {\n            this._tables = {};\n            this._views = {};\n        }\n\n        init(msg) {\n            this.post(msg);\n        }\n\n        post() {\n            throw new Error(\"post() not implemented!\");\n        }\n\n        clear_views(client_id) {\n            for (let key of Object.keys(this._views)) {\n                if (this._views[key].client_id === client_id) {\n                    try {\n                        this._views[key].delete();\n                    } catch (e) {\n                        console.error(e);\n                    }\n                    delete this._views[key];\n                }\n            }\n            console.debug(`GC ${Object.keys(this._views).length} views in memory`);\n        }\n\n        process(msg, client_id) {\n            switch (msg.cmd) {\n                case \"init\":\n                    this.init(msg);\n                    break;\n                case \"table\":\n                    this._tables[msg.name] = perspective.table(msg.args[0], msg.options);\n                    break;\n                case \"add_computed\":\n                    let table = this._tables[msg.original];\n                    let computed = msg.computed;\n                    // rehydrate computed column functions\n                    for (let i = 0; i < computed.length; ++i) {\n                        let column = computed[i];\n                        eval(\"column.func = \" + column.func);\n                    }\n                    this._tables[msg.name] = table.add_computed(computed);\n                    break;\n                case \"table_generate\":\n                    let g;\n                    eval(\"g = \" + msg.args);\n                    g(function(tbl) {\n                        this._tables[msg.name] = tbl;\n                        this.post({\n                            id: msg.id,\n                            data: \"created!\"\n                        });\n                    });\n                    break;\n                case \"table_execute\":\n                    let f;\n                    eval(\"f = \" + msg.f);\n                    f(this._tables[msg.name]);\n                    break;\n                case \"view\":\n                    this._views[msg.view_name] = this._tables[msg.table_name].view(msg.config);\n                    this._views[msg.view_name].client_id = client_id;\n                    break;\n                case \"table_method\": {\n                    let obj = this._tables[msg.name];\n                    let result;\n\n                    try {\n                        if (msg.subscribe) {\n                            obj[msg.method](e => {\n                                this.post({\n                                    id: msg.id,\n                                    data: e\n                                });\n                            });\n                        } else {\n                            result = obj[msg.method].apply(obj, msg.args);\n                            if (result && result.then) {\n                                result\n                                    .then(data => {\n                                        if (data) {\n                                            this.post({\n                                                id: msg.id,\n                                                data: data\n                                            });\n                                        }\n                                    })\n                                    .catch(error => {\n                                        this.post({\n                                            id: msg.id,\n                                            error: error_to_json(error)\n                                        });\n                                    });\n                            } else {\n                                this.post({\n                                    id: msg.id,\n                                    data: result\n                                });\n                            }\n                        }\n                    } catch (e) {\n                        this.post({\n                            id: msg.id,\n                            error: error_to_json(e)\n                        });\n                        return;\n                    }\n\n                    break;\n                }\n                case \"view_method\": {\n                    let obj = this._views[msg.name];\n                    if (!obj) {\n                        this.post({\n                            id: msg.id,\n                            error: {message: \"View is not initialized\"}\n                        });\n                        return;\n                    }\n                    if (msg.subscribe) {\n                        try {\n                            obj[msg.method](e => {\n                                this.post({\n                                    id: msg.id,\n                                    data: e\n                                });\n                            });\n                        } catch (error) {\n                            this.post({\n                                id: msg.id,\n                                error: error_to_json(error)\n                            });\n                        }\n                    } else {\n                        obj[msg.method]\n                            .apply(obj, msg.args)\n                            .then(result => {\n                                if (msg.method === \"delete\") {\n                                    delete this._views[msg.name];\n                                }\n                                this.post({\n                                    id: msg.id,\n                                    data: result\n                                });\n                            })\n                            .catch(error => {\n                                this.post({\n                                    id: msg.id,\n                                    error: error_to_json(error)\n                                });\n                            });\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n    class WorkerHost extends Host {\n        constructor() {\n            super();\n            self.addEventListener(\"message\", e => this.process(e.data), false);\n        }\n\n        post(msg) {\n            self.postMessage(msg);\n        }\n\n        init(msg) {\n            if (typeof WebAssembly === \"undefined\") {\n                console.log(\"Loading asm.js\");\n            } else {\n                console.log(\"Loading wasm\");\n                if (msg.data) {\n                    module = {};\n                    module.wasmBinary = msg.data;\n                    module.wasmJSMethod = \"native-wasm\";\n                    __MODULE__ = __MODULE__(module);\n                } else {\n                    let wasmXHR = new XMLHttpRequest();\n                    wasmXHR.open(\"GET\", msg.path + \"psp.async.wasm\", true);\n                    wasmXHR.responseType = \"arraybuffer\";\n                    wasmXHR.onload = function() {\n                        module = {};\n                        module.wasmBinary = wasmXHR.response;\n                        module.wasmJSMethod = \"native-wasm\";\n                        __MODULE__ = __MODULE__(module);\n                    };\n                    wasmXHR.send(null);\n                }\n            }\n        }\n    }\n\n    if (typeof self !== \"undefined\" && self.addEventListener) {\n        new WorkerHost();\n    }\n\n    /******************************************************************************\n     *\n     * Perspective\n     *\n     */\n\n    const perspective = {\n        __module__: __MODULE__,\n\n        Host: Host,\n\n        TYPE_AGGREGATES: TYPE_AGGREGATES,\n\n        TYPE_FILTERS: TYPE_FILTERS,\n\n        AGGREGATE_DEFAULTS: AGGREGATE_DEFAULTS,\n\n        FILTER_DEFAULTS: FILTER_DEFAULTS,\n\n        SORT_ORDERS: SORT_ORDERS,\n\n        worker: function() {},\n\n        /**\n         * A factory method for constructing {@link table}s.\n         *\n         * @example\n         * // Creating a table directly from node\n         * var table = perspective.table([{x: 1}, {x: 2}]);\n         *\n         * @example\n         * // Creating a table from a Web Worker (instantiated via the worker() method).\n         * var table = worker.table([{x: 1}, {x: 2}]);\n         *\n         * @param {Object<string, Array>|Object<string, string>|Array<Object>|string} data The input data\n         *     for this table.  When supplied an Object with string values, an empty\n         *     table is returned using this Object as a schema.  When an Object with\n         *     Array values is supplied, a table is returned using this object's\n         *     key/value pairs as name/columns respectively.  When an Array is supplied,\n         *     a table is constructed using this Array's objects as rows.  When\n         *     a string is supplied, the parameter as parsed as a CSV.\n         * @param {Object} [options] An optional options dictionary.\n         * @param {string} options.index The name of the column in the resulting\n         *     table to treat as an index.  When updating this table, rows sharing an\n         *     index of a new row will be overwritten. `index` is mutually exclusive\n         *     to `limit`\n         * @param {integer} options.limit The maximum number of rows that can be\n         *     added to this table.  When exceeded, old rows will be overwritten in\n         *     the order they were inserted.  `limit` is mutually exclusive to\n         *     `index`.\n         *\n         * @returns {table} A new {@link table} object.\n         */\n        table: function(data, options) {\n            options = options || {};\n            options.index = options.index || \"\";\n            let pdata;\n\n            if (data instanceof ArrayBuffer || (Buffer && data instanceof Buffer)) {\n                pdata = load_arrow_buffer(data);\n            } else {\n                if (typeof data === \"string\") {\n                    if (data[0] === \",\") {\n                        data = \"_\" + data;\n                    }\n                    data = papaparse.parse(data.trim(), {dynamicTyping: true, header: true}).data;\n                }\n                pdata = parse_data(data);\n                if (pdata.row_count > CHUNKED_THRESHOLD) {\n                    let new_pdata = [];\n                    while (pdata.cdata[0].length > 0) {\n                        const chunk = pdata.cdata.map(x => x.splice(0, CHUNKED_THRESHOLD));\n                        new_pdata.push(Object.assugn({}, pdata, chunk));\n                    }\n                    pdata = new_pdata;\n                } else {\n                    pdata = [pdata];\n                }\n            }\n\n            if (options.index && options.limit) {\n                throw `Cannot specify both index '${options.index}' and limit '${options.limit}'.`;\n            }\n\n            if (options.index && pdata[0].names.indexOf(options.index) === -1) {\n                throw `Specified index '${options.index}' does not exist in data.`;\n            }\n\n            let tbl,\n                gnode,\n                pool,\n                limit_index = 0;\n\n            try {\n                pool = new __MODULE__.t_pool({_update_callback: function() {}});\n                for (let chunk of pdata) {\n                    tbl = __MODULE__.make_table(chunk.cdata[0].length || 0, chunk.names, chunk.types, chunk.cdata, limit_index, options.limit || 4294967295, options.index, chunk.is_arrow, false);\n                    limit_index += chunk.cdata[0].length;\n                    if (options.limit) {\n                        limit_index = limit_index % options.limit;\n                    }\n                    if (!gnode) {\n                        gnode = __MODULE__.make_gnode(tbl);\n                        pool.register_gnode(gnode);\n                    }\n                    __MODULE__.fill(pool, gnode, tbl);\n                }\n\n                return new table(gnode, pool, options.index, undefined, options.limit, limit_index);\n            } catch (e) {\n                if (pool) {\n                    pool.delete();\n                }\n                if (gnode) {\n                    gnode.delete();\n                }\n                throw e;\n            } finally {\n                if (tbl) {\n                    tbl.delete();\n                }\n            }\n        }\n    };\n    return perspective;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/perspective.js","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 39\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_40__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/defineProperty\"\n// module id = 40\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_41__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/helpers/extends\"\n// module id = 41\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_42__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/number/parse-int\"\n// module id = 42\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_43__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/object/keys\"\n// module id = 43\n// module chunks = 0","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nconst NUMBER_AGGREGATES = [\n    \"any\",\n    \"avg\",\n    \"count\",\n    \"distinct count\",\n    \"dominant\",\n    \"first by index\",\n    \"last by index\",\n    \"last\",\n    \"high\",\n    \"low\",\n    \"mean\",\n    \"mean by count\",\n    \"median\",\n    \"pct sum parent\",\n    \"pct sum grand total\",\n    \"sum\",\n    \"sum abs\",\n    \"sum not null\",\n    \"unique\"\n];\n\nconst STRING_AGGREGATES = [\"any\", \"count\", \"distinct count\", \"distinct leaf\", \"dominant\", \"first by index\", \"last by index\", \"last\", \"mean by count\", \"unique\"];\n\nconst BOOLEAN_AGGREGATES = [\"any\", \"count\", \"distinct count\", \"distinct leaf\", \"dominant\", \"first by index\", \"last by index\", \"last\", \"mean by count\", \"unique\", \"and\", \"or\"];\n\nexport const SORT_ORDERS = [\"asc\", \"desc\", \"none\", \"asc abs\", \"desc abs\"];\n\nexport const TYPE_AGGREGATES = {\n    string: STRING_AGGREGATES,\n    float: NUMBER_AGGREGATES,\n    integer: NUMBER_AGGREGATES,\n    boolean: BOOLEAN_AGGREGATES,\n    date: STRING_AGGREGATES\n};\n\nexport const AGGREGATE_DEFAULTS = {\n    string: \"distinct count\",\n    float: \"sum\",\n    integer: \"sum\",\n    boolean: \"distinct count\",\n    date: \"distinct count\"\n};\n\nconst BOOLEAN_FILTERS = [\"&\", \"|\", \"==\", \"!=\", \"or\", \"and\"];\n\nconst NUMBER_FILTERS = [\"<\", \">\", \"==\", \"<=\", \">=\", \"!=\", \"is nan\", \"is not nan\"];\n\nconst STRING_FILTERS = [\"==\", \"contains\", \"!=\", \"in\", \"begins with\", \"ends with\"];\n\nconst DATE_FILTERS = [\"<\", \">\", \"==\", \"<=\", \">=\", \"!=\"];\n\nexport const COLUMN_SEPARATOR_STRING = \"|\";\n\nexport const TYPE_FILTERS = {\n    string: STRING_FILTERS,\n    float: NUMBER_FILTERS,\n    integer: NUMBER_FILTERS,\n    boolean: BOOLEAN_FILTERS,\n    date: DATE_FILTERS\n};\n\nexport const FILTER_DEFAULTS = {\n    string: \"==\",\n    float: \"==\",\n    integer: \"==\",\n    boolean: \"==\",\n    date: \"==\"\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/defaults.js","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport moment from \"moment\";\n\nconst DATE_PARSE_CANDIDATES = [moment.ISO_8601, moment.RFC_2822, \"YYYY-MM-DD\\\\DHH:mm:ss.SSSS\", \"MM-DD-YYYY\", \"MM/DD/YYYY\", \"M/D/YYYY\", \"M/D/YY\", \"DD MMM YYYY\", \"HH:mm:ss.SSS\"];\n\n/**\n *\n *\n * @export\n * @param {string} x\n * @returns\n */\nexport function is_valid_date(x) {\n    return moment(x, DATE_PARSE_CANDIDATES, true).isValid();\n}\n\n/**\n *\n *\n * @export\n * @class DateParser\n */\nexport class DateParser {\n    constructor() {\n        this.date_types = [];\n        this.date_candidates = DATE_PARSE_CANDIDATES.slice();\n        this.date_exclusions = [];\n    }\n\n    parse(input) {\n        if (this.date_exclusions.indexOf(input) > -1) {\n            return -1;\n        } else {\n            let val = input;\n            if (typeof val === \"string\") {\n                val = moment(input, this.date_types, true);\n                if (!val.isValid() || this.date_types.length === 0) {\n                    for (let candidate of this.date_candidates) {\n                        val = moment(input, candidate, true);\n                        if (val.isValid()) {\n                            this.date_types.push(candidate);\n                            this.date_candidates.splice(this.date_candidates.indexOf(candidate), 1);\n                            return +val;\n                        }\n                    }\n                    this.date_exclusions.push(input);\n                    return -1;\n                }\n            }\n            return +val;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/date_parser.js","module.exports = __WEBPACK_EXTERNAL_MODULE_46__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 46\n// module chunks = 0","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n/**\n * Bind all methods in a class to the class instance.  It is sad that this is\n * necessary.\n *\n * @export\n * @param {*} self\n */\nexport function bindall(self) {\n    for (const key of Object.getOwnPropertyNames(self.constructor.prototype)) {\n        const value = self[key];\n        if (key !== \"constructor\" && typeof value === \"function\") {\n            self[key] = value.bind(self);\n        }\n    }\n}\n\n/**\n * Detect Internet Explorer.\n *\n * Returns\n * -------\n * True if the current script is running in Internet Explorer.\n */\nexport function detectIE() {\n    if (typeof window === \"undefined\") return false;\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0) {\n        return parseInt(ua.substring(msie + 5, ua.indexOf(\".\", msie)), 10);\n    }\n    var trident = ua.indexOf(\"Trident/\");\n    if (trident > 0) {\n        var rv = ua.indexOf(\"rv:\");\n        return parseInt(ua.substring(rv + 3, ua.indexOf(\".\", rv)), 10);\n    }\n    var edge = ua.indexOf(\"Edge/\");\n    if (edge > 0) {\n        return parseInt(ua.substring(edge + 5, ua.indexOf(\".\", edge)), 10);\n    }\n    return false;\n}\n\n/**\n * Detect Chrome.\n *\n * Returns\n * -------\n * Detect if the current script is running in Chrome.\n */\nexport function detectChrome() {\n    var isChromium = window.chrome,\n        winNav = window.navigator,\n        vendorName = winNav.vendor,\n        isOpera = winNav.userAgent.indexOf(\"OPR\") > -1,\n        isIEedge = winNav.userAgent.indexOf(\"Edge\") > -1,\n        isIOSChrome = winNav.userAgent.match(\"CriOS\");\n\n    if (isIOSChrome) {\n        return true;\n    } else if (isChromium !== null && typeof isChromium !== \"undefined\" && vendorName === \"Google Inc.\" && isOpera === false && isIEedge === false) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * An Object for capturing details of the invoking script's origin.\n *\n * Returns\n * -------\n * An instance of a ScriptPath object.  Interesting methods on this object\n * include:\n *     fullPath : The complete path of this script.\n *     path : The path (no host).\n *     host : The host (no path).\n *     file : The file name itself.\n */\nexport function ScriptPath() {\n    var pathParts;\n    try {\n        throw new Error();\n    } catch (e) {\n        var stackLines = e.stack.split(\"\\n\");\n        var callerIndex = 0;\n        for (var i in stackLines) {\n            if (!stackLines[i].match(/http[s]?:\\/\\//)) continue;\n            callerIndex = Number(i);\n            break;\n        }\n        pathParts = stackLines[callerIndex].match(/((http[s]?:\\/\\/.+\\/)([^\\/]+\\.(js|html))).*?:/);\n    }\n\n    this.fullPath = function() {\n        return pathParts ? pathParts[1] : window.location.origin + window.location.pathname;\n    };\n    this.path = function() {\n        return pathParts ? pathParts[2] : window.location.pathname;\n    };\n    this.host = function() {\n        let x = this.path().match(/.+?\\/\\/.+?\\//);\n        return x ? x[0] : window.location.hostname;\n    };\n    this.file = function() {\n        return pathParts ? pathParts[3] : \"\";\n    };\n}\n\nif (!String.prototype.includes) {\n    String.prototype.includes = function(search, start) {\n        if (typeof start !== \"number\") {\n            start = 0;\n        }\n\n        if (start + search.length > this.length) {\n            return false;\n        } else {\n            return this.indexOf(search, start) !== -1;\n        }\n    };\n}\n\n// from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, \"includes\", {\n        value: function(searchElement, fromIndex) {\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            // 1. Let O be ? ToObject(this value).\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) {\n                return false;\n            }\n\n            // 4. Let n be ? ToInteger(fromIndex).\n            //    (If fromIndex is undefined, this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n ≥ 0, then\n            //  a. Let k be n.\n            // 6. Else n < 0,\n            //  a. Let k be len + n.\n            //  b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return x === y || (typeof x === \"number\" && typeof y === \"number\" && isNaN(x) && isNaN(y));\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\n                if (sameValueZero(o[k], searchElement)) {\n                    return true;\n                }\n                // c. Increase k by 1.\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        }\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/utils.js","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Col, Predicate } from './predicate';\nimport { Schema, Field, Struct } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { Vector, DictionaryVector, IntVector, StructVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\n\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\nexport type BindFunc = (batch: RecordBatch) => void;\n\nexport interface DataFrame {\n    filter(predicate: Predicate): DataFrame;\n    scan(next: NextFunc, bind?: BindFunc): void;\n    count(): number;\n    countBy(col: (Col|string)): CountByResult;\n}\n\nexport class Table implements DataFrame {\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n        if (sources) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n        if (isAsyncIterable(sources)) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for await (let recordBatch of readAsync(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        } else if (isPromise(sources)) {\n            return Table.from(await sources);\n        } else if (sources) {\n            return Table.from(sources);\n        }\n        return Table.empty();\n    }\n    static fromStruct(struct: StructVector) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n                            (struct.view.chunkVectors as StructVector[]) :\n                            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    // List of inner RecordBatches\n    public readonly batches: RecordBatch[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    public readonly batchesUnion: RecordBatch;\n\n    constructor(batches: RecordBatch[]);\n    constructor(...batches: RecordBatch[]);\n    constructor(schema: Schema, batches: RecordBatch[]);\n    constructor(schema: Schema, ...batches: RecordBatch[]);\n    constructor(...args: any[]) {\n        let schema: Schema;\n        let batches: RecordBatch[];\n        if (args[0] instanceof Schema) {\n            schema = args[0];\n            batches = Array.isArray(args[1][0]) ? args[1][0] : args[1];\n        } else if (args[0] instanceof RecordBatch) {\n            schema = (batches = args)[0].schema;\n        } else {\n            schema = (batches = args[0])[0].schema;\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n    public get(index: number): Struct['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn(name: string) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    public getColumnAt(index: number) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (\n              this._columns[index] = this.batchesUnion.getChildAt(index)!);\n    }\n    public getColumnIndex(name: string) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        return this.batchesUnion[Symbol.iterator]() as any;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public count(): number { return this.length; }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    public toString(separator?: string) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    public rowsToString(separator = ' | '): TableToStringIterator {\n        return new TableToStringIterator(tableRowsToString(this, separator));\n    }\n}\n\nclass FilteredDataFrame implements DataFrame {\n    private predicate: Predicate;\n    private batches: RecordBatch[];\n    constructor (batches: RecordBatch[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult extends Table implements DataFrame {\n    constructor(values: Vector, counts: IntVector<any>) {\n        super(\n            new RecordBatch(new Schema([\n                new Field('values', values.type),\n                new Field('counts', counts.type)\n            ]),\n            counts.length, [values, counts]\n        ));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class TableToStringIterator implements IterableIterator<string> {\n    constructor(private iterator: IterableIterator<string>) {}\n    [Symbol.iterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    throw(error?: any) { return this.iterator.throw && this.iterator.throw(error) || { done: true, value: '' }; }\n    return(value?: any) { return this.iterator.return && this.iterator.return(value) || { done: true, value: '' }; }\n    pipe(stream: NodeJS.WritableStream) {\n        let res: IteratorResult<string>;\n        let write = () => {\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done) { break; }\n                } while (stream['write'](res.value + '\\n', 'utf8'));\n            }\n            if (!res || !res.done) {\n                stream['once']('drain', write);\n            } else if (!(stream as any)['isTTY']) {\n                stream['end']('\\n');\n            }\n        };\n        write();\n    }\n}\n\nfunction* tableRowsToString(table: Table, separator = ' | ') {\n    const fields = table.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(stringify);\n    const maxColumnWidths = header.map(x => x.length);\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = table.length - 1; ++i < n;) {\n        let val, row = [i, ...table.get(i)];\n        for (let j = -1, k = row.length; ++j < k; ) {\n            val = stringify(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j], val.length);\n        }\n    }\n    yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n    for (let i = -1; ++i < table.length;) {\n        yield [i, ...table.get(i)]\n            .map((x) => stringify(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n\nfunction leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n\n\n// WEBPACK FOOTER //\n// table.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike, DataType, Dictionary, Int } from '../type';\n\nexport class DictionaryView<T extends DataType> implements View<T> {\n    public indices: Vector<Int>;\n    public dictionary: Vector<T>;\n    constructor(dictionary: Vector<T>, indices: Vector<Int>) {\n        this.indices = indices;\n        this.dictionary = dictionary;\n    }\n    public clone(data: Data<Dictionary<T>>): this {\n        return new DictionaryView(data.dictionary, this.indices.clone(data.indices)) as this;\n    }\n    public isValid(index: number): boolean {\n        return this.indices.isValid(index);\n    }\n    public get(index: number): T['TValue'] {\n        return this.dictionary.get(this.indices.get(index));\n    }\n    public set(index: number, value: T['TValue']): void {\n        this.dictionary.set(this.indices.get(index), value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const values = this.dictionary, indices = this.indices;\n        for (let index = -1, n = indices.length; ++index < n;) {\n            yield values.get(indices.get(index));\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        // First find the dictionary key for the desired value...\n        const key = this.dictionary.indexOf(search);\n        if (key === -1) { return key; }\n\n        // ... then find the first occurence of that key in indices\n        return this.indices.indexOf(key!);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/dictionary.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector, createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nimport { List, Binary, Utf8, FixedSizeList, FlatListType } from '../type';\nimport { ListType, DataType, IterableArrayLike } from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport abstract class ListViewBase<T extends (ListType | FlatListType | FixedSizeList)> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public get(index: number): T['TValue'] {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n    protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n}\n\nexport abstract class VariableListViewBase<T extends (ListType | FlatListType)> extends ListViewBase<T> {\n    constructor(data: Data<T>) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\n\nexport class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n    constructor(data: Data<List<T>>) {\n        super(data);\n        this.values = createVector(data.values);\n    }\n    protected getList(values: Vector<T>, index: number, valueOffsets: Int32Array) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>, valueOffsets: Int32Array): void {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\n\nexport class FixedSizeListView<T extends DataType> extends ListViewBase<FixedSizeList<T>> {\n    public size: number;\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    protected getList(values: Vector<T>, index: number) {\n        const size = this.size;\n        return values.slice(index *= size, index + size) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>): void {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\n\nexport class BinaryView extends VariableListViewBase<Binary> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    protected setList(values: Uint8Array, index: number, value: Uint8Array, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\nexport class Utf8View extends VariableListViewBase<Utf8> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    protected setList(values: Uint8Array, index: number, value: string, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/list.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike } from '../type';\nimport { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n\nexport abstract class NestedView<T extends NestedType> implements View<T> {\n    public length: number;\n    public numChildren: number;\n    public childData: Data<any>[];\n    protected _children: Vector<any>[];\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this._children) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public indexOf(_: T['TValue']): number {\n        throw new Error(`Not implemented yet`);\n    }\n    public toJSON(): any { return this.toArray(); }\n    public toString() {\n        return [...this].map((x) => stringify(x)).join(', ');\n    }\n    public get(index: number): T['TValue'] {\n        return this.getNested(this, index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setNested(this, index, value);\n    }\n    protected abstract getNested(self: NestedView<T>, index: number): T['TValue'];\n    protected abstract setNested(self: NestedView<T>, index: number, value: T['TValue']): void;\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : (this._children[index] as Vector<R>) ||\n              (this._children[index] = Vector.create<R>(this.childData[index]));\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\n\nexport class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> extends NestedView<T> {\n    // @ts-ignore\n    public typeIds: Int8Array;\n    // @ts-ignore\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n    }\n    protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(index) : null;\n    }\n    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(index, value) : null;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets);\n        }\n    }\n}\n\nexport class DenseUnionView extends UnionView<DenseUnion> {\n    public valueOffsets: Int32Array;\n    constructor(data: Data<DenseUnion>, children?: Vector<any>[]) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    protected getNested(self: DenseUnionView, index: number): any | null {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\n\nexport class StructView extends NestedView<Struct> {\n    protected getNested(self: StructView, index: number) {\n        return new RowView(self as any, self._children, index);\n    }\n    protected setNested(self: StructView, index: number, value: any): void {\n        let idx = -1, len = self.numChildren, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        } else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\n\nexport class MapView extends NestedView<Map_> {\n    public typeIds: { [k: string]: number };\n    constructor(data: Data<Map_>, children?: Vector<any>[]) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) =>\n            (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    protected getNested(self: MapView, index: number) {\n        return new MapRowView(self as any, self._children, index);\n    }\n    protected setNested(self: MapView, index: number, value: { [k: string]: any }): void {\n        let typeIds = self.typeIds as any, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        } else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key as any));\n                }\n            }\n        }\n    }\n}\n\nexport class RowView extends UnionView<SparseUnion> {\n    protected rowIndex: number;\n    constructor(data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    public clone(data: Data<SparseUnion> & NestedView<any>): this {\n        return new (<any> this.constructor)(data, this._children, this.rowIndex) as this;\n    }\n    protected getChildValue(self: RowView, index: number, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: RowView, index: number, value: any, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nexport class MapRowView extends RowView {\n    // @ts-ignore\n    public typeIds: any;\n    public toJSON() {\n        const get = this.getChildValue;\n        const result = {} as { [k: string]: any };\n        const typeIds = this.typeIds as { [k: string]: number };\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    protected getChildValue(self: MapRowView, key: any, typeIds: any, _valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: MapRowView, key: any, value: any, typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : Array.isArray(x) ? JSON.stringify(x) : ArrayBuffer.isView(x) ? `[${x}]` : `${x}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/nested.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View } from '../vector';\nimport { getBool, setBool, iterateBits } from '../util/bit';\nimport { Bool, Float16, Date_, Interval, Null, Int32, Timestamp } from '../type';\nimport { DataType, FlatType, PrimitiveType, IterableArrayLike } from '../type';\n\nexport class FlatView<T extends FlatType> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public get(index: number): T['TValue'] {\n        return this.values[index];\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.values[index] = value;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values.subarray(0, this.length);\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue']> {\n        return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n    }\n}\n\nexport class NullView implements View<Null> {\n    public length: number;\n    constructor(data: Data<Null>) {\n        this.length = data.length;\n    }\n    public clone(data: Data<Null>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public set(): void {}\n    public get() { return null; }\n    public toArray(): IterableArrayLike<null> {\n        return [...this];\n    }\n    public indexOf(search: any) {\n        // if you're looking for nulls and the view isn't empty, we've got 'em!\n        return search === null && this.length > 0 ? 0 : -1;\n    }\n    public *[Symbol.iterator](): IterableIterator<null> {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\n\nexport class BoolView extends FlatView<Bool> {\n    protected offset: number;\n    constructor(data: Data<Bool>) {\n        super(data);\n        this.offset = data.offset;\n    }\n    public toArray() { return [...this]; }\n    public get(index: number): boolean {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    public set(index: number, value: boolean): void {\n        setBool(this.values, this.offset + index, value);\n    }\n    public [Symbol.iterator](): IterableIterator<boolean> {\n        return iterateBits<boolean>(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\n\nexport class ValidityView<T extends DataType> implements View<T> {\n    protected view: View<T>;\n    protected length: number;\n    protected offset: number;\n    protected nullBitmap: Uint8Array;\n    constructor(data: Data<T>, view: View<T>) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap!;\n    }\n    public clone(data: Data<T>): this {\n        return new ValidityView(data, this.view.clone(data)) as this;\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return [...this];\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public isValid(index: number): boolean {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public get(index: number): T['TValue'] | null {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iterateBits<T['TValue'] | null>(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    protected getNullable(view: View<T>, index: number, byte: number, bit: number) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n\nexport class PrimitiveView<T extends PrimitiveType> extends FlatView<T> {\n    public size: number;\n    public ArrayType: T['ArrayType'];\n    constructor(data: Data<T>, size?: number) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this.size) as this;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values[index * size];\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values[index * size] = value;\n    }\n    public get(index: number): T['TValue'] {\n        return this.getValue(this.values, index, this.size);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\n\nexport class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values;\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value.every((d: number, i: number) => d === search[i])) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values.subarray(index * size, index * size + size);\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values.set((value as T['TArray']).subarray(0, size), index * size);\n    }\n}\n\nexport class Float16View extends PrimitiveView<Float16> {\n    public toArray() { return new Float32Array(this); }\n    protected getValue(values: Uint16Array, index: number, size: number): number {\n        return (values[index * size] - 32767) / 32767;\n    }\n    protected setValue(values: Uint16Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\n\nexport class DateDayView extends PrimitiveView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochDaysToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\n\nexport class DateMillisecondView extends FixedSizeView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampDayView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochDaysToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\n\nexport class TimestampSecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochSecondsToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\n\nexport class TimestampMillisecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampMicrosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\n\nexport class TimestampNanosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\n\nexport class IntervalYearMonthView extends PrimitiveView<Interval> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Int32Array {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12  /* months */]);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Int32Array): void {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\n\nexport class IntervalYearView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] / 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\n\nexport class IntervalMonthView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] % 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\n\nexport function epochSecondsToMs(data: Int32Array, index: number) { return 1000 * data[index]; }\nexport function epochDaysToMs(data: Int32Array, index: number) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }\nexport function epochMicrosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }\nexport function epochNanosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }\n\nexport function epochMillisecondsToDate(epochMs: number) { return new Date(epochMs); }\nexport function epochDaysToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n\n\n\n// WEBPACK FOOTER //\n// vector/flat.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Vector, DictionaryVector } from './vector';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(expr: Predicate): Predicate { return new And(this, expr); }\n    or(expr: Predicate): Predicate { return new Or(this, expr); }\n    not(): Predicate { return new Not(this); }\n    ands(): Predicate[] { return [this]; }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    constructor(public readonly left: Predicate, public readonly right: Predicate) {\n        super();\n    }\n}\n\nexport class And extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) && right(idx, batch);\n    }\n    ands(): Predicate[] { return this.left.ands().concat(this.right.ands()); }\n}\n\nexport class Or extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) || right(idx, batch);\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n\n\n\n// WEBPACK FOOTER //\n// predicate.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { readJSON } from './json';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync, TypeDataLoader } from './vector';\nimport { Schema } from '../../type';\nimport { Message } from '../metadata';\n\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\n\nexport function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n    let input: any = sources;\n    let messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>;\n    if (typeof input === 'string') {\n        try { input = JSON.parse(input); }\n        catch (e) { input = sources; }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    } else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\n\nexport async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n    for await (let recordBatch of readRecordBatchesAsync(readBuffersAsync(sources))) {\n        yield recordBatch;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/arrow.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport Long = flatbuffers.Long;\n\nexport function* readJSON(json: any) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map<number, Vector>();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['data']['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\nfunction flattenDataSources(xs: any[]): any[][] {\n    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], [] as any[][]);\n}\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(private sources: any[][], nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset] as number[]).buffer);\n        } else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        } else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x)) as any;\n        }\n    }\n}\n\nfunction int64DataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\n\nfunction decimalDataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\n\nimport * as Schema_ from '../../fb/Schema';\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nimport TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\n\nfunction schemaFromJSON(s: any): Schema {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    return new Schema(\n        fieldsFromJSON(s['fields'], dictionaryFields),\n        customMetadata(s['customMetadata']),\n        MetadataVersion.V4, dictionaryFields\n    );\n}\n\nfunction recordBatchFromJSON(b: any): RecordBatchMetadata {\n    return new RecordBatchMetadata(\n        MetadataVersion.V4,\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nfunction dictionaryBatchFromJSON(b: any): DictionaryBatch {\n    return new DictionaryBatch(\n        MetadataVersion.V4,\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction fieldsFromJSON(fs: any[], dictionaryFields: Map<number, Field<Dictionary>> | null): Field[] {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null) as Field[];\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldMetadata[] {\n    return (xs || []).reduce<FieldMetadata[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldMetadata(\n            new Long(column['count'], 0),\n            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldMetadata[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetadata[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nfunction fieldFromJSON(f: any, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f['name'];\n    let field: Field | void;\n    let nullable = f['nullable'];\n    let dataType: DataType<any> | null;\n    let id: number, keysMeta: any, dictMeta: any;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta)! : new Int32(),\n            id, dictMeta['isOrdered']\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(metadata?: any) {\n    return new Map<string, string>(Object.entries(metadata || {}));\n}\n\nconst namesToTypeMap: { [n: string]: Type }  = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\n\nfunction typeFromJSON(t: any, children?: Field[]) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\n\nfunction nullFromJSON           (_type: any)                    { return new Null();                                                                  }\nfunction intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                      case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                      case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                      case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                      case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                      case Precision.HALF: return new Float16();\n                                                                      case Precision.SINGLE: return new Float32();\n                                                                      case Precision.DOUBLE: return new Float64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction binaryFromJSON         (_type: any)                    { return new Binary();                                                                }\nfunction utf8FromJSON           (_type: any)                    { return new Utf8();                                                                  }\nfunction boolFromJSON           (_type: any)                    { return new Bool();                                                                  }\nfunction decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                             }\nfunction dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                   }\nfunction timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth); }\nfunction timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);            }\nfunction intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                            }\nfunction listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                          }\nfunction structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                        }\nfunction unionFromJSON          (_type: any, children: Field[]) { return new Union(_type['mode'], (_type['typeIdsArray'] || []) as Type[], children); }\nfunction fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                     }\nfunction fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                              }\nfunction mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                     }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/json.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_56__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/object/entries\"\n// module id = 56\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    high(): number { return this.buffer[1]; }\n    low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// util/int.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\ntype MessageReader = (bb: ByteBuffer) => IterableIterator<RecordBatchMetadata | DictionaryBatch>;\n\nexport function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources as T];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(sources: AsyncIterable<T>) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    for await (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport class BinaryDataLoader extends TypeDataLoader {\n    private bytes: Uint8Array;\n    private messageOffset: number;\n    constructor(bb: ByteBuffer, nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\n\nfunction toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\n\nfunction readSchema(bb: ByteBuffer) {\n    let schema: Schema, readMessages, footer: Footer | null;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    } else if (schema = readStreamSchema(bb)!) {\n        readMessages = readStreamMessages;\n    } else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\n\nconst PADDING = 4;\nconst MAGIC_STR = 'ARROW1';\nconst MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nfunction checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst magicLength = MAGIC.length;\nconst magicAndPadding = magicLength + PADDING;\nconst magicX2AndPadding = magicLength * 2 + PADDING;\n\nfunction readStreamSchema(bb: ByteBuffer) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message as Schema;\n            }\n        }\n    }\n    return null;\n}\n\nfunction* readStreamMessages(bb: ByteBuffer) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        } else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        } else {\n            continue;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\n\nfunction readFileSchema(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, footerOffset: number;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                    Invalid footer length  */\n        (footerLength = bb.readInt32(footerOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + magicX2AndPadding > fileLength))) {\n        return null;\n    }\n    bb.setPosition(footerOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\n\nfunction readFileMessages(footer: Footer) {\n    return function* (bb: ByteBuffer) {\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset.low);\n            yield readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch;\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset.low);\n            yield readMessage(bb, bb.readInt32(bb.position())) as RecordBatchMetadata;\n        }\n    };\n}\n\nfunction* readMessages(bb: ByteBuffer) {\n    let length: number, message: Schema | RecordBatchMetadata | DictionaryBatch;\n    while (bb.position() < bb.capacity() &&\n          (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)!) {\n            yield message;\n        }\n    }\n}\n\nfunction readMessage(bb: ByteBuffer, length: number) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\n\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nfunction footerFromByteBuffer(bb: ByteBuffer) {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n    return new Footer(\n        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n        new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields)\n    );\n}\n\nfunction messageFromByteBuffer(bb: ByteBuffer) {\n    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!, new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m.header(new _RecordBatch())!);\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m.header(new _DictionaryBatch())!);\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\n\nfunction schemaFromMessage(version: MetadataVersion, s: _Schema, dictionaryFields: Map<number, Field<Dictionary>>) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\n\nfunction recordBatchFromMessage(version: MetadataVersion, b: _RecordBatch) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version));\n}\n\nfunction dictionaryBatchFromMessage(version: MetadataVersion, d: _DictionaryBatch) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, d.data()!), d.id(), d.isDelta());\n}\n\nfunction dictionaryBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction recordBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction fieldsFromSchema(s: _Schema, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldsFromField(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldNodesFromRecordBatch(b: _RecordBatch) {\n    const fieldNodes = [] as FieldMetadata[];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n    }\n    return fieldNodes;\n}\n\nfunction buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n    const buffers = [] as BufferMetadata[];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i)!;\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\n\nfunction field(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f.name()!;\n    let field: Field | void;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType: DataType<any> | null;\n    let keysMeta: _Int | null, id: number;\n    let dictMeta: _DictionaryEncoding | null;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta)! : new Int32(),\n            id, dictMeta.isOrdered()\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction fieldNodeFromRecordBatch(f: _FieldNode) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\n\nfunction bufferFromRecordBatch(b: _Buffer) {\n    return new BufferMetadata(b.offset(), b.length());\n}\n\nfunction typeFromField(f: _Field, children?: Field[]): DataType<any> | null {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null())!);\n        case Type.Int: return intFromField(f.type(new _Int())!);\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint())!);\n        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n        case Type.Date: return dateFromField(f.type(new _Date())!);\n        case Type.Time: return timeFromField(f.type(new _Time())!);\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n        case Type.List: return listFromField(f.type(new _List())!, children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct())!, children || []);\n        case Type.Union: return unionFromField(f.type(new _Union())!, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!, children || []);\n        case Type.Map: return mapFromField(f.type(new _Map())!, children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\n\nfunction nullFromField           (_type: _Null)                             { return new Null();                                                                }\nfunction intFromField            (_type: _Int)                              { switch (_type.bitWidth()) {\n                                                                                  case  8: return _type.isSigned() ? new  Int8() : new  Uint8();\n                                                                                  case 16: return _type.isSigned() ? new Int16() : new Uint16();\n                                                                                  case 32: return _type.isSigned() ? new Int32() : new Uint32();\n                                                                                  case 64: return _type.isSigned() ? new Int64() : new Uint64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction floatFromField          (_type: _FloatingPoint)                    { switch (_type.precision()) {\n                                                                                  case Precision.HALF: return new Float16();\n                                                                                  case Precision.SINGLE: return new Float32();\n                                                                                  case Precision.DOUBLE: return new Float64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction binaryFromField         (_type: _Binary)                           { return new Binary();                                                              }\nfunction utf8FromField           (_type: _Utf8)                             { return new Utf8();                                                                }\nfunction boolFromField           (_type: _Bool)                             { return new Bool();                                                                }\nfunction decimalFromField        (_type: _Decimal)                          { return new Decimal(_type.scale(), _type.precision());                             }\nfunction dateFromField           (_type: _Date)                             { return new Date_(_type.unit());                                                   }\nfunction timeFromField           (_type: _Time)                             { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth);                  }\nfunction timestampFromField      (_type: _Timestamp)                        { return new Timestamp(_type.unit(), _type.timezone());                             }\nfunction intervalFromField       (_type: _Interval)                         { return new Interval(_type.unit());                                                }\nfunction listFromField           (_type: _List, children: Field[])          { return new List(children);                                                        }\nfunction structFromField         (_type: _Struct, children: Field[])        { return new Struct(children);                                                      }\nfunction unionFromField          (_type: _Union, children: Field[])         { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[], children); }\nfunction fixedSizeBinaryFromField(_type: _FixedSizeBinary)                  { return new FixedSizeBinary(_type.byteWidth());                                    }\nfunction fixedSizeListFromField  (_type: _FixedSizeList, children: Field[]) { return new FixedSizeList(_type.listSize(), children);                             }\nfunction mapFromField            (_type: _Map, children: Field[])           { return new Map_(_type.keysSorted(), children);                                    }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/binary.ts","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/File.ts","export interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/**\n * @ignore\n */\nexport function isPromise(x: any): x is PromiseLike<any> {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isObservable(x: any): x is Observable<any> {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isArrayLike(x: any): x is ArrayLike<any> {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n\n/**\n * @ignore\n */\nexport function isIterable(x: any): x is Iterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n\n/**\n * @ignore\n */\nexport function isAsyncIterable(x: any): x is AsyncIterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n\n\n\n// WEBPACK FOOTER //\n// util/compat.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_61__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/symbol\"\n// module id = 61\n// module chunks = 0","/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport papaparse from \"papaparse\";\n\nconst jsonFormatter = {\n    initDataValue: () => [],\n    initRowValue: () => ({}),\n    initColumnValue: (data, row, colName) => (row[colName] = []),\n    setColumnValue: (data, row, colName, value) => (row[colName] = value),\n    addColumnValue: (data, row, colName, value) => row[colName].unshift(value),\n    addRow: (data, row) => data.push(row),\n    formatData: data => data,\n    slice: (data, start) => data.slice(start)\n};\n\nconst csvFormatter = Object.assign({}, jsonFormatter, {\n    addColumnValue: (data, row, colName, value) => row[colName.split(\"|\").join(\",\")].unshift(value),\n    setColumnValue: (data, row, colName, value) => (row[colName.split(\"|\").join(\",\")] = value),\n    formatData: (data, config) => papaparse.unparse(data, config)\n});\n\nconst jsonTableFormatter = {\n    initDataValue: () => new Object(),\n    initRowValue: () => {},\n    setColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName].push(value);\n    },\n    addColumnValue: (data, row, colName, value) => {\n        data[colName] = data[colName] || [];\n        data[colName][data[colName].length - 1].unshift(value);\n    },\n    initColumnValue: (data, row, colName) => {\n        data[colName] = data[colName] || [];\n        data[colName].push([]);\n    },\n    addRow: () => {},\n    formatData: data => data,\n    slice: (data, start) => {\n        let new_data = {};\n        for (let x in data) {\n            new_data[x] = data[x].slice(start);\n        }\n        return new_data;\n    }\n};\n\nexport default {\n    jsonFormatter,\n    jsonTableFormatter,\n    csvFormatter\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/view_formatters.js","module.exports = __WEBPACK_EXTERNAL_MODULE_63__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-runtime/core-js/object/assign\"\n// module id = 63\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_64__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 64\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_65__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ws\"\n// module id = 65\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_66__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"process\"\n// module id = 66\n// module chunks = 0",";var window = window || {};exports.load_perspective = function(Module) {\nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module[\"arguments\"]=[];Module[\"thisProgram\"]=\"./this.program\";Module[\"quit\"]=(function(status,toThrow){throw toThrow});Module[\"preRun\"]=[];Module[\"postRun\"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=true;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_NODE){scriptDirectory=__dirname+\"/\";var nodeFS;var nodePath;Module[\"read\"]=function shell_read(filename,binary){var ret;if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);ret=nodeFS[\"readFileSync\"](filename);return binary?ret:ret.toString()};Module[\"readBinary\"]=function readBinary(filename){var ret=Module[\"read\"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){Module[\"thisProgram\"]=process[\"argv\"][1].replace(/\\\\/g,\"/\")}Module[\"arguments\"]=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}process[\"on\"](\"uncaughtException\",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));process[\"on\"](\"unhandledRejection\",(function(reason,p){process[\"exit\"](1)}));Module[\"quit\"]=(function(status){process[\"exit\"](status)});Module[\"inspect\"]=(function(){return\"[Emscripten Module object]\"})}else{}var out=Module[\"print\"]||(typeof console!==\"undefined\"?console.log.bind(console):typeof print!==\"undefined\"?print:null);var err=Module[\"printErr\"]||(typeof printErr!==\"undefined\"?printErr:typeof console!==\"undefined\"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function dynamicAlloc(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}var asm2wasmImports={\"f64-rem\":(function(x,y){return x%y}),\"debugger\":(function(){debugger})};var functionPointers=new Array(0);var GLOBAL_BASE=1024;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getMemory(size){if(!staticSealed)return staticAlloc(size);if(!runtimeInitialized)return dynamicAlloc(size);return _malloc(size)}function Pointer_stringify(ptr,length){if(length===0||!ptr)return\"\";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret=\"\";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str=\"\";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function allocateUTF8OnStack(str){var size=lengthBytesUTF8(str)+1;var ret=stackAlloc(size);stringToUTF8Array(str,HEAP8,ret,size);return ret}var PAGE_SIZE=16384;var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;var MIN_TOTAL_MEMORY=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module[\"buffer\"]=buffer=buf}function updateGlobalBufferViews(){Module[\"HEAP8\"]=HEAP8=new Int8Array(buffer);Module[\"HEAP16\"]=HEAP16=new Int16Array(buffer);Module[\"HEAP32\"]=HEAP32=new Int32Array(buffer);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buffer);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buffer);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buffer);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buffer);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \"+TOTAL_MEMORY+\", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")}if(!Module[\"reallocBuffer\"])Module[\"reallocBuffer\"]=(function(size){var ret;try{if(ArrayBuffer.transfer){ret=ArrayBuffer.transfer(buffer,size)}else{var oldHEAP8=HEAP8;ret=new ArrayBuffer(size);var temp=new Int8Array(ret);temp.set(oldHEAP8)}}catch(e){return false}var success=_emscripten_replace_memory(ret);if(!success)return false;return ret});function enlargeMemory(){var PAGE_MULTIPLE=Module[\"usingWasm\"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;var LIMIT=2147483648-PAGE_MULTIPLE;if(HEAP32[DYNAMICTOP_PTR>>2]>LIMIT){return false}var OLD_TOTAL_MEMORY=TOTAL_MEMORY;TOTAL_MEMORY=Math.max(TOTAL_MEMORY,MIN_TOTAL_MEMORY);while(TOTAL_MEMORY<HEAP32[DYNAMICTOP_PTR>>2]){if(TOTAL_MEMORY<=536870912){TOTAL_MEMORY=alignUp(2*TOTAL_MEMORY,PAGE_MULTIPLE)}else{TOTAL_MEMORY=Math.min(alignUp((3*TOTAL_MEMORY+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=Module[\"reallocBuffer\"](TOTAL_MEMORY);if(!replacement||replacement.byteLength!=TOTAL_MEMORY){TOTAL_MEMORY=OLD_TOTAL_MEMORY;return false}updateGlobalBuffer(replacement);updateGlobalBufferViews();return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\"byteLength\").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module[\"TOTAL_STACK\"]||5242880;var TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)err(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+TOTAL_MEMORY+\"! (TOTAL_STACK=\"+TOTAL_STACK+\")\");if(Module[\"buffer\"]){buffer=Module[\"buffer\"]}else{if(typeof WebAssembly===\"object\"&&typeof WebAssembly.Memory===\"function\"){Module[\"wasmMemory\"]=new WebAssembly.Memory({\"initial\":TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=Module[\"wasmMemory\"].buffer}else{buffer=new ArrayBuffer(TOTAL_MEMORY)}Module[\"buffer\"]=buffer}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}function integrateWasmJS(){var wasmTextFile=\"psp.sync.wast\";var wasmBinaryFile=\"psp.sync.wasm\";var asmjsCodeFile=\"psp.sync.temp.asm.js\";if(!isDataURI(wasmTextFile)){wasmTextFile=locateFile(wasmTextFile)}if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}if(!isDataURI(asmjsCodeFile)){asmjsCodeFile=locateFile(asmjsCodeFile)}var wasmPageSize=64*1024;var info={\"global\":null,\"env\":null,\"asm2wasm\":asm2wasmImports,\"parent\":Module};var exports=null;function mergeMemory(newBuffer){var oldBuffer=Module[\"buffer\"];if(newBuffer.byteLength<oldBuffer.byteLength){err(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\")}var oldView=new Int8Array(oldBuffer);var newView=new Int8Array(newBuffer);newView.set(oldView);updateGlobalBuffer(newBuffer);updateGlobalBufferViews()}function fixImports(imports){return imports}function getBinary(){try{if(Module[\"wasmBinary\"]){return new Uint8Array(Module[\"wasmBinary\"])}if(Module[\"readBinary\"]){return Module[\"readBinary\"](wasmBinaryFile)}else{throw\"sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)\"}}catch(err){abort(err)}}function doNativeWasm(global,env,providedBuffer){if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\");return false}if(!(Module[\"wasmMemory\"]instanceof WebAssembly.Memory)){err(\"no native wasm Memory in use\");return false}env[\"memory\"]=Module[\"wasmMemory\"];info[\"global\"]={\"NaN\":NaN,\"Infinity\":Infinity};info[\"global.Math\"]=Math;info[\"env\"]=env;function receiveInstance(instance,module){exports=instance.exports;if(exports.memory)mergeMemory(exports.memory);Module[\"asm\"]=exports;Module[\"usingWasm\"]=true;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}var instance;try{instance=new WebAssembly.Instance(new WebAssembly.Module(getBinary()),info)}catch(e){err(\"failed to compile wasm module: \"+e);if(e.toString().indexOf(\"imported Memory with incompatible size\")>=0){err(\"Memory size incompatibility issues may be due to changing TOTAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set TOTAL_MEMORY at runtime to something smaller than it was at compile time).\")}return false}receiveInstance(instance);return exports}Module[\"asmPreload\"]=Module[\"asm\"];var asmjsReallocBuffer=Module[\"reallocBuffer\"];var wasmReallocBuffer=(function(size){var PAGE_MULTIPLE=Module[\"usingWasm\"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;size=alignUp(size,PAGE_MULTIPLE);var old=Module[\"buffer\"];var oldSize=old.byteLength;if(Module[\"usingWasm\"]){try{var result=Module[\"wasmMemory\"].grow((size-oldSize)/wasmPageSize);if(result!==(-1|0)){return Module[\"buffer\"]=Module[\"wasmMemory\"].buffer}else{return null}}catch(e){return null}}});Module[\"reallocBuffer\"]=(function(size){if(finalMethod===\"asmjs\"){return asmjsReallocBuffer(size)}else{return wasmReallocBuffer(size)}});var finalMethod=\"\";Module[\"asm\"]=(function(global,env,providedBuffer){env=fixImports(env);if(!env[\"table\"]){var TABLE_SIZE=Module[\"wasmTableSize\"];if(TABLE_SIZE===undefined)TABLE_SIZE=1024;var MAX_TABLE_SIZE=Module[\"wasmMaxTableSize\"];if(typeof WebAssembly===\"object\"&&typeof WebAssembly.Table===\"function\"){if(MAX_TABLE_SIZE!==undefined){env[\"table\"]=new WebAssembly.Table({\"initial\":TABLE_SIZE,\"maximum\":MAX_TABLE_SIZE,\"element\":\"anyfunc\"})}else{env[\"table\"]=new WebAssembly.Table({\"initial\":TABLE_SIZE,element:\"anyfunc\"})}}else{env[\"table\"]=new Array(TABLE_SIZE)}Module[\"wasmTable\"]=env[\"table\"]}if(!env[\"memoryBase\"]){env[\"memoryBase\"]=Module[\"STATIC_BASE\"]}if(!env[\"tableBase\"]){env[\"tableBase\"]=0}var exports;exports=doNativeWasm(global,env,providedBuffer);assert(exports,\"no binaryen method succeeded.\");return exports})}integrateWasmJS();var ASM_CONSTS=[(function(){if(typeof self!==\"undefined\"){if(self.dispatchEvent&&!self._perspective_initialized&&self.document){self._perspective_initialized=true;var event=self.document.createEvent(\"Event\");event.initEvent(\"perspective-ready\",false,true);self.dispatchEvent(event)}else if(!self.document&&self.postMessage){self.postMessage({})}}})];function _emscripten_asm_const_i(code){return ASM_CONSTS[code]()}STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+54480;__ATINIT__.push({func:(function(){__GLOBAL__I_000101()})},{func:(function(){__GLOBAL__sub_I_main_cpp()})},{func:(function(){__GLOBAL__sub_I_sym_table_cpp()})},{func:(function(){__GLOBAL__sub_I_bind_cpp()})},{func:(function(){___emscripten_environ_constructor()})},{func:(function(){__GLOBAL__sub_I_iostream_cpp()})});var STATIC_BUMP=54480;Module[\"STATIC_BASE\"]=STATIC_BASE;Module[\"STATIC_BUMP\"]=STATIC_BUMP;STATICTOP+=16;function ___assert_fail(condition,filename,line,func){abort(\"Assertion failed: \"+Pointer_stringify(condition)+\", at: \"+[filename?Pointer_stringify(filename):\"unknown filename\",line,func?Pointer_stringify(func):\"unknown function\"])}var ENV={};function ___buildEnvironment(environ){var MAX_ENV_VALUES=64;var TOTAL_ENV_SIZE=1024;var poolPtr;var envPtr;if(!___buildEnvironment.called){___buildEnvironment.called=true;ENV[\"USER\"]=ENV[\"LOGNAME\"]=\"web_user\";ENV[\"PATH\"]=\"/\";ENV[\"PWD\"]=\"/\";ENV[\"HOME\"]=\"/home/web_user\";ENV[\"LANG\"]=\"C.UTF-8\";ENV[\"_\"]=Module[\"thisProgram\"];poolPtr=getMemory(TOTAL_ENV_SIZE);envPtr=getMemory(MAX_ENV_VALUES*4);HEAP32[envPtr>>2]=poolPtr;HEAP32[environ>>2]=envPtr}else{envPtr=HEAP32[environ>>2];poolPtr=HEAP32[envPtr>>2]}var strings=[];var totalSize=0;for(var key in ENV){if(typeof ENV[key]===\"string\"){var line=key+\"=\"+ENV[key];strings.push(line);totalSize+=line.length}}if(totalSize>TOTAL_ENV_SIZE){throw new Error(\"Environment size exceeded TOTAL_ENV_SIZE!\")}var ptrSize=4;for(var i=0;i<strings.length;i++){var line=strings[i];writeAsciiToMemory(line,poolPtr);HEAP32[envPtr+i*ptrSize>>2]=poolPtr;poolPtr+=line.length+1}HEAP32[envPtr+strings.length*ptrSize>>2]=0}function ___cxa_allocate_exception(size){return _malloc(size)}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var key in EXCEPTIONS.infos){var ptr=+key;var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Module[\"dynCall_vi\"](info.destructor,ptr)}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___cxa_pure_virtual(){ABORT=true;throw\"Pure virtual function called!\"}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};EXCEPTIONS.last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\"}function ___cxa_uncaught_exception(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}function ___lock(){}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function ___setErrNo(value){if(Module[\"___errno_location\"])HEAP32[Module[\"___errno_location\"]()>>2]=value;return value}function ___map_file(pathname,size){___setErrNo(ERRNO_CODES.EPERM);return-1}var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall10(which,varargs){SYSCALLS.varargs=varargs;try{var path=SYSCALLS.getStr();FS.unlink(path);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffers){___syscall146.buffers=[null,[],[]];___syscall146.printChar=(function(stream,curr){var buffer=___syscall146.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}})}for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){___syscall146.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall163(which,varargs){SYSCALLS.varargs=varargs;try{return-ERRNO_CODES.ENOMEM}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall192(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get(),prot=SYSCALLS.get(),flags=SYSCALLS.get(),fd=SYSCALLS.get(),off=SYSCALLS.get();off<<=12;var ptr;var allocated=false;if(fd===-1){ptr=_memalign(PAGE_SIZE,len);if(!ptr)return-ERRNO_CODES.ENOMEM;_memset(ptr,0,len);allocated=true}else{var info=FS.getStream(fd);if(!info)return-ERRNO_CODES.EBADF;var res=FS.mmap(info,HEAPU8,addr,len,off,prot,flags);ptr=res.ptr;allocated=res.allocated}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,flags:flags};return ptr}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall194(which,varargs){SYSCALLS.varargs=varargs;try{var fd=SYSCALLS.get(),zero=SYSCALLS.getZero(),length=SYSCALLS.get64();FS.ftruncate(fd,length);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which,varargs){SYSCALLS.varargs=varargs;try{return PROCINFO.pid}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall91(which,varargs){SYSCALLS.varargs=varargs;try{var addr=SYSCALLS.get(),len=SYSCALLS.get();var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);SYSCALLS.doMsync(addr,stream,len,info.flags);FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}var structRegistrations={};function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return\"_unknown\"}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return\"_\"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return(function(){\"use strict\";return body.apply(this,arguments)})}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,(function(message){this.name=errorName;this.message=message;var stack=(new Error(message)).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\")}}));errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=(function(){if(this.message===undefined){return this.name}else{return this.name+\": \"+this.message}});return errorClass}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach((function(type){typeDependencies[type]=dependentTypes}));function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push((function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}}))}}));if(0===unregisteredTypes.length){onComplete(typeConverters)}}function __embind_finalize_value_object(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map((function(field){return field.getterReturnType})).concat(fieldRecords.map((function(field){return field.setterArgumentType})));whenDependentTypesAreResolved([structType],fieldTypes,(function(fieldTypes){var fields={};fieldRecords.forEach((function(field,i){var fieldName=field.fieldName;var getterReturnType=fieldTypes[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:(function(ptr){return getterReturnType[\"fromWireType\"](getter(getterContext,ptr))}),write:(function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType[\"toWireType\"](destructors,o));runDestructors(destructors)})}}));return[{name:reg.name,\"fromWireType\":(function(ptr){var rv={};for(var i in fields){rv[i]=fields[i].read(ptr)}rawDestructor(ptr);return rv}),\"toWireType\":(function(destructors,o){for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError(\"Missing field\")}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr}),\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:rawDestructor}]}))}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options){options=options||{};if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}var name=registeredInstance.name;if(!rawType){throwBindingError('type \"'+name+'\" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(\"Cannot register type '\"+name+\"' twice\")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach((function(cb){cb()}))}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":(function(wt){return!!wt}),\"toWireType\":(function(destructors,o){return o?trueValue:falseValue}),\"argPackAdvance\":8,\"readValueFromPointer\":(function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError(\"Unknown boolean type size: \"+name)}return this[\"fromWireType\"](heap[pointer>>shift])}),destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+\" instance already deleted\")}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}});clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function runDestructor(handle){var $$=handle.$$;if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}this.$$.count.value-=1;var toDelete=0===this.$$.count.value;if(toDelete){runDestructor(this)}if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj[\"delete\"]()}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError(\"Object already scheduled for deletion\")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype[\"isAliasOf\"]=ClassHandle_isAliasOf;ClassHandle.prototype[\"clone\"]=ClassHandle_clone;ClassHandle.prototype[\"delete\"]=ClassHandle_delete;ClassHandle.prototype[\"isDeleted\"]=ClassHandle_isDeleted;ClassHandle.prototype[\"deleteLater\"]=ClassHandle_deleteLater}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=(function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError(\"Function '\"+humanName+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+proto[methodName].overloadTable+\")!\")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)});proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(\"Cannot register public name '\"+name+\"' twice\")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\"+numArguments+\")!\")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError(\"Expected null or instance of \"+desiredClass.name+\", got an instance of \"+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(\"null is not a valid \"+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass \"'+_embind_repr(handle)+'\" as a '+this.name)}if(!handle.$$.ptr){throwBindingError(\"Cannot pass deleted object as a pointer of type \"+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError(\"null is not a valid \"+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass \"'+_embind_repr(handle)+'\" as a '+this.name)}if(!handle.$$.ptr){throwBindingError(\"Cannot pass deleted object as a pointer of type \"+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError(\"Cannot convert argument of type \"+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+\" to parameter type \"+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError(\"Passing raw pointer to smart pointer is illegal\")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError(\"Cannot convert argument of type \"+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+\" to parameter type \"+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle[\"clone\"]();ptr=this.rawShare(ptr,__emval_register((function(){clonedHandle[\"delete\"]()})));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError(\"Unsupporting sharing policy\")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError(\"null is not a valid \"+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass \"'+_embind_repr(handle)+'\" as a '+this.name)}if(!handle.$$.ptr){throwBindingError(\"Cannot pass deleted object as a pointer of type \"+this.name)}if(handle.$$.ptrType.isConst){throwBindingError(\"Cannot convert argument of type \"+handle.$$.ptrType.name+\" to parameter type \"+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle[\"delete\"]()}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module[\"getInheritedInstanceCount\"]=getInheritedInstanceCount;Module[\"getLiveInheritedInstances\"]=getLiveInheritedInstances;Module[\"flushPendingDeletes\"]=flushPendingDeletes;Module[\"setDelayFunction\"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError(\"ptr should not be undefined\")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError(\"makeClassHandle requires ptr and ptrType\")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError(\"Both smartPtrType and smartPtr must be specified\")}record.count={value:1};return Object.create(prototype,{$$:{value:record}})}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance[\"clone\"]()}else{var rv=registeredInstance[\"clone\"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype[\"argPackAdvance\"]=8;RegisteredPointer.prototype[\"readValueFromPointer\"]=simpleReadValueFromPointer;RegisteredPointer.prototype[\"deleteObject\"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype[\"fromWireType\"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this[\"toWireType\"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this[\"toWireType\"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this[\"toWireType\"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistant public symbol\")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(dynCall){return(function(){var args=new Array(arguments.length+1);args[0]=rawFunction;for(var i=0;i<arguments.length;i++){args[i+1]=arguments[i]}return dynCall.apply(null,args)})}var fp;if(Module[\"FUNCTION_TABLE_\"+signature]!==undefined){fp=Module[\"FUNCTION_TABLE_\"+signature][rawFunction]}else if(typeof FUNCTION_TABLE!==\"undefined\"){fp=FUNCTION_TABLE[rawFunction]}else{var dc=Module[\"asm\"][\"dynCall_\"+signature];if(dc===undefined){dc=Module[\"asm\"][\"dynCall_\"+signature.replace(/f/g,\"d\")];if(dc===undefined){throwBindingError(\"No dynCall invoker for signature: \"+signature)}}fp=makeDynCaller(dc)}if(typeof fp!==\"function\"){throwBindingError(\"unknown function pointer with signature \"+signature+\": \"+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+\": \"+unboundTypes.map(getTypeName).join([\", \"]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,(function(){throwUnboundTypeError(\"Cannot construct \"+name+\" due to unbound types\",[baseClassRawType])}));whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],(function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,(function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError(\"Use 'new' to construct \"+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+\" has no accessible constructor\")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError(\"Tried to invoke ctor of \"+name+\" with invalid number of parameters (\"+arguments.length+\") - expected (\"+Object.keys(registeredClass.constructor_body).toString()+\") parameters instead!\")}return body.apply(this,arguments)}));var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+\"*\",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+\" const*\",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]}))}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],(function(classType){classType=classType[0];var humanName=\"constructor \"+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\"+(argCount-1)+\") for class '\"+classType.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\")}classType.registeredClass.constructor_body[argCount-1]=function unboundTypeHandler(){throwUnboundTypeError(\"Cannot construct \"+classType.name+\" due to unbound types\",rawArgTypes)};whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){classType.registeredClass.constructor_body[argCount-1]=function constructor_body(){if(arguments.length!==argCount-1){throwBindingError(humanName+\" called with \"+arguments.length+\" arguments, expected \"+(argCount-1))}var destructors=[];var args=new Array(argCount);args[0]=rawConstructor;for(var i=1;i<argCount;++i){args[i]=argTypes[i][\"toWireType\"](destructors,arguments[i-1])}var ptr=invoker.apply(null,args);runDestructors(destructors);return argTypes[0][\"fromWireType\"](ptr)};return[]}));return[]}))}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!==\"void\";var argsWired=new Array(argCount-2);return(function(){if(arguments.length!==argCount-2){throwBindingError(\"function \"+humanName+\" called with \"+arguments.length+\" arguments, expected \"+(argCount-2)+\" args!\")}var destructors=needsDestructorStack?[]:null;var thisWired;if(isClassMethodFunc){thisWired=argTypes[1].toWireType(destructors,this)}for(var i=0;i<argCount-2;++i){argsWired[i]=argTypes[i+2].toWireType(destructors,arguments[i])}var invokerFuncArgs=isClassMethodFunc?[cppTargetFunc,thisWired]:[cppTargetFunc];var rv=cppInvokerFunc.apply(null,invokerFuncArgs.concat(argsWired));if(needsDestructorStack){runDestructors(destructors)}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;i++){var param=i===1?thisWired:argsWired[i-2];if(argTypes[i].destructorFunction!==null){argTypes[i].destructorFunction(param)}}}if(returns){return argTypes[0].fromWireType(rv)}})}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],(function(classType){classType=classType[0];var humanName=classType.name+\".\"+methodName;if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError(\"Cannot call \"+humanName+\" due to unbound types\",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,(function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]}));return[]}))}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module[\"count_emval_handles\"]=count_emval_handles;Module[\"get_first_emval\"]=get_first_emval}function __emval_register(value){switch(value){case undefined:{return 1};case null:{return 2};case true:{return 3};case false:{return 4};default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":(function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv}),\"toWireType\":(function(destructors,value){return __emval_register(value)}),\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null})}function enumReadValueFromPointer(name,shift,signed){switch(shift){case 0:return(function(pointer){var heap=signed?HEAP8:HEAPU8;return this[\"fromWireType\"](heap[pointer])});case 1:return(function(pointer){var heap=signed?HEAP16:HEAPU16;return this[\"fromWireType\"](heap[pointer>>1])});case 2:return(function(pointer){var heap=signed?HEAP32:HEAPU32;return this[\"fromWireType\"](heap[pointer>>2])});default:throw new TypeError(\"Unknown integer type: \"+name)}}function __embind_register_enum(rawType,name,size,isSigned){var shift=getShiftFromSize(size);name=readLatin1String(name);function ctor(){}ctor.values={};registerType(rawType,{name:name,constructor:ctor,\"fromWireType\":(function(c){return this.constructor.values[c]}),\"toWireType\":(function(destructors,c){return c.value}),\"argPackAdvance\":8,\"readValueFromPointer\":enumReadValueFromPointer(name,shift,isSigned),destructorFunction:null});exposePublicSymbol(name,ctor)}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+\" has unknown type \"+getTypeName(rawType))}return impl}function __embind_register_enum_value(rawEnumType,name,enumValue){var enumType=requireRegisteredType(rawEnumType,\"enum\");name=readLatin1String(name);var Enum=enumType.constructor;var Value=Object.create(enumType.constructor.prototype,{value:{value:enumValue},constructor:{value:createNamedFunction(enumType.name+\"_\"+name,(function(){}))}});Enum.values[enumValue]=Value;Enum[name]=Value}function _embind_repr(v){if(v===null){return\"null\"}var t=typeof v;if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString()}else{return\"\"+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return(function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])});case 3:return(function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])});default:throw new TypeError(\"Unknown float type: \"+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":(function(value){return value}),\"toWireType\":(function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}return value}),\"argPackAdvance\":8,\"readValueFromPointer\":floatReadValueFromPointer(name,shift),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,(function(){throwUnboundTypeError(\"Cannot call \"+name+\" due to unbound types\",argTypes)}),argCount-1);whenDependentTypesAreResolved([],argTypes,(function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]}))}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError(\"Unknown integer type: \"+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=(function(value){return value});if(minRange===0){var bitshift=32-8*size;fromWireType=(function(value){return value<<bitshift>>>bitshift})}var isUnsignedType=name.indexOf(\"unsigned\")!=-1;registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":(function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number \"'+_embind_repr(value)+'\" from JS side to C/C++ side to an argument of type \"'+name+'\", which is outside the valid range ['+minRange+\", \"+maxRange+\"]!\")}return isUnsignedType?value>>>0:value|0}),\"argPackAdvance\":8,\"readValueFromPointer\":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(heap[\"buffer\"],data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":8,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_smart_ptr(rawType,rawPointeeType,name,sharingPolicy,getPointeeSignature,rawGetPointee,constructorSignature,rawConstructor,shareSignature,rawShare,destructorSignature,rawDestructor){name=readLatin1String(name);rawGetPointee=embind__requireFunction(getPointeeSignature,rawGetPointee);rawConstructor=embind__requireFunction(constructorSignature,rawConstructor);rawShare=embind__requireFunction(shareSignature,rawShare);rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);whenDependentTypesAreResolved([rawType],[rawPointeeType],(function(pointeeType){pointeeType=pointeeType[0];var registeredPointer=new RegisteredPointer(name,pointeeType.registeredClass,false,false,true,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor);return[registeredPointer]}))}function __embind_register_std_string(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":(function(value){var length=HEAPU32[value>>2];var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}_free(value);return a.join(\"\")}),\"toWireType\":(function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}function getTAElement(ta,index){return ta[index]}function getStringElement(string,index){return string.charCodeAt(index)}var getElement;if(value instanceof Uint8Array){getElement=getTAElement}else if(value instanceof Uint8ClampedArray){getElement=getTAElement}else if(value instanceof Int8Array){getElement=getTAElement}else if(typeof value===\"string\"){getElement=getStringElement}else{throwBindingError(\"Cannot pass non-string to std::string\")}var length=value.length;var ptr=_malloc(4+length);HEAPU32[ptr>>2]=length;for(var i=0;i<length;++i){var charCode=getElement(value,i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+4+i]=charCode}if(destructors!==null){destructors.push(_free,ptr)}return ptr}),\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:(function(ptr){_free(ptr)})})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var getHeap,shift;if(charSize===2){getHeap=(function(){return HEAPU16});shift=1}else if(charSize===4){getHeap=(function(){return HEAPU32});shift=2}registerType(rawType,{name:name,\"fromWireType\":(function(value){var HEAP=getHeap();var length=HEAPU32[value>>2];var a=new Array(length);var start=value+4>>shift;for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAP[start+i])}_free(value);return a.join(\"\")}),\"toWireType\":(function(destructors,value){var HEAP=getHeap();var length=value.length;var ptr=_malloc(4+length*charSize);HEAPU32[ptr>>2]=length;var start=ptr+4>>shift;for(var i=0;i<length;++i){HEAP[start+i]=value.charCodeAt(i)}if(destructors!==null){destructors.push(_free,ptr)}return ptr}),\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:(function(ptr){_free(ptr)})})}function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":(function(){return undefined}),\"toWireType\":(function(destructors,o){return undefined})})}function requireHandle(handle){if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handle_array[handle].value}function __emval_as(handle,returnType,destructorsRef){handle=requireHandle(handle);returnType=requireRegisteredType(returnType,\"emval::as\");var destructors=[];var rd=__emval_register(destructors);HEAP32[destructorsRef>>2]=rd;return returnType[\"toWireType\"](destructors,handle)}function __emval_lookupTypes(argCount,argTypes,argWireTypes){var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(HEAP32[(argTypes>>2)+i],\"parameter \"+i)}return a}function __emval_call(handle,argCount,argTypes,argv){handle=requireHandle(handle);var types=__emval_lookupTypes(argCount,argTypes);var args=new Array(argCount);for(var i=0;i<argCount;++i){var type=types[i];args[i]=type[\"readValueFromPointer\"](argv);argv+=type[\"argPackAdvance\"]}var rv=handle.apply(undefined,args);return __emval_register(rv)}function __emval_allocateDestructors(destructorsRef){var destructors=[];HEAP32[destructorsRef>>2]=__emval_register(destructors);return destructors}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];if(symbol===undefined){return readLatin1String(address)}else{return symbol}}var emval_methodCallers=[];function __emval_call_method(caller,handle,methodName,destructorsRef,args){caller=emval_methodCallers[caller];handle=requireHandle(handle);methodName=getStringOrSymbol(methodName);return caller(handle,methodName,__emval_allocateDestructors(destructorsRef),args)}function __emval_call_void_method(caller,handle,methodName,args){caller=emval_methodCallers[caller];handle=requireHandle(handle);methodName=getStringOrSymbol(methodName);caller(handle,methodName,null,args)}function emval_get_global(){function testGlobal(obj){obj[\"$$$embind_global$$$\"]=obj;var success=typeof $$$embind_global$$$===\"object\"&&obj[\"$$$embind_global$$$\"]===obj;if(!success){delete obj[\"$$$embind_global$$$\"]}return success}if(typeof $$$embind_global$$$===\"object\"){return $$$embind_global$$$}if(typeof global===\"object\"&&testGlobal(global)){$$$embind_global$$$=global}else if(typeof window===\"object\"&&testGlobal(window)){$$$embind_global$$$=window}if(typeof $$$embind_global$$$===\"object\"){return $$$embind_global$$$}throw Error(\"unable to get global object.\")}function __emval_get_global(name){if(name===0){return __emval_register(emval_get_global())}else{name=getStringOrSymbol(name);return __emval_register(emval_get_global()[name])}}function __emval_addMethodCaller(caller){var id=emval_methodCallers.length;emval_methodCallers.push(caller);return id}function __emval_get_method_caller(argCount,argTypes){var types=__emval_lookupTypes(argCount,argTypes);var retType=types[0];var argN=new Array(argCount-1);var invokerFunction=(function(handle,name,destructors,args){var offset=0;for(var i=0;i<argCount-1;++i){argN[i]=types[i+1].readValueFromPointer(args+offset);offset+=types[i+1].argPackAdvance}var rv=handle[name].apply(handle,argN);for(var i=0;i<argCount-1;++i){if(types[i+1].deleteObject){types[i+1].deleteObject(argN[i])}}if(!retType.isVoid){return retType.toWireType(destructors,rv)}});return __emval_addMethodCaller(invokerFunction)}function __emval_get_module_property(name){name=getStringOrSymbol(name);return __emval_register(Module[name])}function __emval_get_property(handle,key){handle=requireHandle(handle);key=requireHandle(key);return __emval_register(handle[key])}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function craftEmvalAllocator(argCount){var argsList=new Array(argCount+1);return(function(constructor,argTypes,args){argsList[0]=constructor;for(var i=0;i<argCount;++i){var argType=requireRegisteredType(HEAP32[(argTypes>>2)+i],\"parameter \"+i);argsList[i+1]=argType.readValueFromPointer(args);args+=argType.argPackAdvance}var obj=new(constructor.bind.apply(constructor,argsList));return __emval_register(obj)})}var emval_newers={};function __emval_new(handle,argCount,argTypes,args){handle=requireHandle(handle);var newer=emval_newers[argCount];if(!newer){newer=craftEmvalAllocator(argCount);emval_newers[argCount]=newer}return newer(handle,argTypes,args)}function __emval_new_array(){return __emval_register([])}function __emval_new_cstring(v){return __emval_register(getStringOrSymbol(v))}function __emval_run_destructors(handle){var destructors=emval_handle_array[handle].value;runDestructors(destructors);__emval_decref(handle)}function __emval_set_property(handle,key,value){handle=requireHandle(handle);key=requireHandle(key);value=requireHandle(value);handle[key]=value}function __emval_take_value(type,argv){type=requireRegisteredType(type,\"_emval_take_value\");var v=type[\"readValueFromPointer\"](argv);return __emval_register(v)}function _abort(){Module[\"abort\"]()}function _clock(){if(_clock.start===undefined)_clock.start=Date.now();return(Date.now()-_clock.start)*(1e6/1e3)|0}function _emscripten_get_now(){abort()}function _emscripten_get_now_is_monotonic(){return ENVIRONMENT_IS_NODE||typeof dateNow!==\"undefined\"||(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&self[\"performance\"]&&self[\"performance\"][\"now\"]}function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if(clk_id===1&&_emscripten_get_now_is_monotonic()){now=_emscripten_get_now()}else{___setErrNo(ERRNO_CODES.EINVAL);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _getenv(name){if(name===0)return 0;name=Pointer_stringify(name);if(!ENV.hasOwnProperty(name))return 0;if(_getenv.ret)_free(_getenv.ret);_getenv.ret=allocateUTF8(ENV[name]);return _getenv.ret}function _getpagesize(){return PAGE_SIZE}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _llvm_stackrestore(p){var self=_llvm_stacksave;var ret=self.LLVM_SAVEDSTACKS[p];self.LLVM_SAVEDSTACKS.splice(p,1);stackRestore(ret)}function _llvm_stacksave(){var self=_llvm_stacksave;if(!self.LLVM_SAVEDSTACKS){self.LLVM_SAVEDSTACKS=[]}self.LLVM_SAVEDSTACKS.push(stackSave());return self.LLVM_SAVEDSTACKS.length-1}function _llvm_trap(){abort(\"trap!\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}function _usleep(useconds){var msec=useconds/1e3;if((ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&self[\"performance\"]&&self[\"performance\"][\"now\"]){var start=self[\"performance\"][\"now\"]();while(self[\"performance\"][\"now\"]()-start<msec){}}else{var start=Date.now();while(Date.now()-start<msec){}}return 0}function _nanosleep(rqtp,rmtp){var seconds=HEAP32[rqtp>>2];var nanoseconds=HEAP32[rqtp+4>>2];if(rmtp!==0){HEAP32[rmtp>>2]=0;HEAP32[rmtp+4>>2]=0}return _usleep(seconds*1e6+nanoseconds/1e3)}function _pthread_cond_wait(){return 0}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function _pthread_mutex_destroy(){}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Module[\"dynCall_v\"](func);_pthread_once.seen[ptr]=1}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?Pointer_stringify(tm_zone):\"\"};var pattern=Pointer_stringify(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":(function(date){return WEEKDAYS[date.tm_wday].substring(0,3)}),\"%A\":(function(date){return WEEKDAYS[date.tm_wday]}),\"%b\":(function(date){return MONTHS[date.tm_mon].substring(0,3)}),\"%B\":(function(date){return MONTHS[date.tm_mon]}),\"%C\":(function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)}),\"%d\":(function(date){return leadingNulls(date.tm_mday,2)}),\"%e\":(function(date){return leadingSomething(date.tm_mday,2,\" \")}),\"%g\":(function(date){return getWeekBasedYear(date).toString().substring(2)}),\"%G\":(function(date){return getWeekBasedYear(date)}),\"%H\":(function(date){return leadingNulls(date.tm_hour,2)}),\"%I\":(function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)}),\"%j\":(function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)}),\"%m\":(function(date){return leadingNulls(date.tm_mon+1,2)}),\"%M\":(function(date){return leadingNulls(date.tm_min,2)}),\"%n\":(function(){return\"\\n\"}),\"%p\":(function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}}),\"%S\":(function(date){return leadingNulls(date.tm_sec,2)}),\"%t\":(function(){return\"\\t\"}),\"%u\":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()||7}),\"%U\":(function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"}),\"%V\":(function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)}),\"%w\":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()}),\"%W\":(function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"}),\"%y\":(function(date){return(date.tm_year+1900).toString().substring(2)}),\"%Y\":(function(date){return date.tm_year+1900}),\"%z\":(function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)}),\"%Z\":(function(date){return date.tm_zone}),\"%%\":(function(){return\"%\"})};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}InternalError=Module[\"InternalError\"]=extendError(Error,\"InternalError\");embind_init_charCodes();BindingError=Module[\"BindingError\"]=extendError(Error,\"BindingError\");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");init_emval();if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function _emscripten_get_now_actual(){var t=process[\"hrtime\"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!==\"undefined\"){_emscripten_get_now=dateNow}else if(typeof self===\"object\"&&self[\"performance\"]&&typeof self[\"performance\"][\"now\"]===\"function\"){_emscripten_get_now=(function(){return self[\"performance\"][\"now\"]()})}else if(typeof performance===\"object\"&&typeof performance[\"now\"]===\"function\"){_emscripten_get_now=(function(){return performance[\"now\"]()})}else{_emscripten_get_now=Date.now}DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module[\"wasmTableSize\"]=1476;Module[\"wasmMaxTableSize\"]=1476;Module.asmGlobalArg={};Module.asmLibraryArg={\"abort\":abort,\"enlargeMemory\":enlargeMemory,\"getTotalMemory\":getTotalMemory,\"abortOnCannotGrowMemory\":abortOnCannotGrowMemory,\"___assert_fail\":___assert_fail,\"___buildEnvironment\":___buildEnvironment,\"___cxa_allocate_exception\":___cxa_allocate_exception,\"___cxa_pure_virtual\":___cxa_pure_virtual,\"___cxa_throw\":___cxa_throw,\"___cxa_uncaught_exception\":___cxa_uncaught_exception,\"___lock\":___lock,\"___map_file\":___map_file,\"___setErrNo\":___setErrNo,\"___syscall10\":___syscall10,\"___syscall140\":___syscall140,\"___syscall145\":___syscall145,\"___syscall146\":___syscall146,\"___syscall163\":___syscall163,\"___syscall192\":___syscall192,\"___syscall194\":___syscall194,\"___syscall20\":___syscall20,\"___syscall221\":___syscall221,\"___syscall5\":___syscall5,\"___syscall54\":___syscall54,\"___syscall6\":___syscall6,\"___syscall91\":___syscall91,\"___unlock\":___unlock,\"__embind_finalize_value_object\":__embind_finalize_value_object,\"__embind_register_bool\":__embind_register_bool,\"__embind_register_class\":__embind_register_class,\"__embind_register_class_constructor\":__embind_register_class_constructor,\"__embind_register_class_function\":__embind_register_class_function,\"__embind_register_emval\":__embind_register_emval,\"__embind_register_enum\":__embind_register_enum,\"__embind_register_enum_value\":__embind_register_enum_value,\"__embind_register_float\":__embind_register_float,\"__embind_register_function\":__embind_register_function,\"__embind_register_integer\":__embind_register_integer,\"__embind_register_memory_view\":__embind_register_memory_view,\"__embind_register_smart_ptr\":__embind_register_smart_ptr,\"__embind_register_std_string\":__embind_register_std_string,\"__embind_register_std_wstring\":__embind_register_std_wstring,\"__embind_register_value_object\":__embind_register_value_object,\"__embind_register_value_object_field\":__embind_register_value_object_field,\"__embind_register_void\":__embind_register_void,\"__emval_as\":__emval_as,\"__emval_call\":__emval_call,\"__emval_call_method\":__emval_call_method,\"__emval_call_void_method\":__emval_call_void_method,\"__emval_decref\":__emval_decref,\"__emval_get_global\":__emval_get_global,\"__emval_get_method_caller\":__emval_get_method_caller,\"__emval_get_module_property\":__emval_get_module_property,\"__emval_get_property\":__emval_get_property,\"__emval_incref\":__emval_incref,\"__emval_new\":__emval_new,\"__emval_new_array\":__emval_new_array,\"__emval_new_cstring\":__emval_new_cstring,\"__emval_run_destructors\":__emval_run_destructors,\"__emval_set_property\":__emval_set_property,\"__emval_take_value\":__emval_take_value,\"_abort\":_abort,\"_clock\":_clock,\"_clock_gettime\":_clock_gettime,\"_emscripten_asm_const_i\":_emscripten_asm_const_i,\"_emscripten_memcpy_big\":_emscripten_memcpy_big,\"_getenv\":_getenv,\"_getpagesize\":_getpagesize,\"_gettimeofday\":_gettimeofday,\"_llvm_stackrestore\":_llvm_stackrestore,\"_llvm_stacksave\":_llvm_stacksave,\"_llvm_trap\":_llvm_trap,\"_nanosleep\":_nanosleep,\"_pthread_cond_wait\":_pthread_cond_wait,\"_pthread_getspecific\":_pthread_getspecific,\"_pthread_key_create\":_pthread_key_create,\"_pthread_mutex_destroy\":_pthread_mutex_destroy,\"_pthread_once\":_pthread_once,\"_pthread_setspecific\":_pthread_setspecific,\"_strftime_l\":_strftime_l,\"DYNAMICTOP_PTR\":DYNAMICTOP_PTR,\"STACKTOP\":STACKTOP};var asm=Module[\"asm\"](Module.asmGlobalArg,Module.asmLibraryArg,buffer);var __GLOBAL__I_000101=Module[\"__GLOBAL__I_000101\"]=asm[\"__GLOBAL__I_000101\"];var __GLOBAL__sub_I_bind_cpp=Module[\"__GLOBAL__sub_I_bind_cpp\"]=asm[\"__GLOBAL__sub_I_bind_cpp\"];var __GLOBAL__sub_I_iostream_cpp=Module[\"__GLOBAL__sub_I_iostream_cpp\"]=asm[\"__GLOBAL__sub_I_iostream_cpp\"];var __GLOBAL__sub_I_main_cpp=Module[\"__GLOBAL__sub_I_main_cpp\"]=asm[\"__GLOBAL__sub_I_main_cpp\"];var __GLOBAL__sub_I_sym_table_cpp=Module[\"__GLOBAL__sub_I_sym_table_cpp\"]=asm[\"__GLOBAL__sub_I_sym_table_cpp\"];var __ZSt18uncaught_exceptionv=Module[\"__ZSt18uncaught_exceptionv\"]=asm[\"__ZSt18uncaught_exceptionv\"];var ___emscripten_environ_constructor=Module[\"___emscripten_environ_constructor\"]=asm[\"___emscripten_environ_constructor\"];var ___getTypeName=Module[\"___getTypeName\"]=asm[\"___getTypeName\"];var _emscripten_replace_memory=Module[\"_emscripten_replace_memory\"]=asm[\"_emscripten_replace_memory\"];var _free=Module[\"_free\"]=asm[\"_free\"];var _main=Module[\"_main\"]=asm[\"_main\"];var _malloc=Module[\"_malloc\"]=asm[\"_malloc\"];var _memalign=Module[\"_memalign\"]=asm[\"_memalign\"];var _memset=Module[\"_memset\"]=asm[\"_memset\"];var stackAlloc=Module[\"stackAlloc\"]=asm[\"stackAlloc\"];var stackRestore=Module[\"stackRestore\"]=asm[\"stackRestore\"];var stackSave=Module[\"stackSave\"]=asm[\"stackSave\"];var dynCall_i=Module[\"dynCall_i\"]=asm[\"dynCall_i\"];var dynCall_ii=Module[\"dynCall_ii\"]=asm[\"dynCall_ii\"];var dynCall_iii=Module[\"dynCall_iii\"]=asm[\"dynCall_iii\"];var dynCall_iiii=Module[\"dynCall_iiii\"]=asm[\"dynCall_iiii\"];var dynCall_iiiii=Module[\"dynCall_iiiii\"]=asm[\"dynCall_iiiii\"];var dynCall_iiiiid=Module[\"dynCall_iiiiid\"]=asm[\"dynCall_iiiiid\"];var dynCall_iiiiii=Module[\"dynCall_iiiiii\"]=asm[\"dynCall_iiiiii\"];var dynCall_iiiiiid=Module[\"dynCall_iiiiiid\"]=asm[\"dynCall_iiiiiid\"];var dynCall_iiiiiii=Module[\"dynCall_iiiiiii\"]=asm[\"dynCall_iiiiiii\"];var dynCall_iiiiiiii=Module[\"dynCall_iiiiiiii\"]=asm[\"dynCall_iiiiiiii\"];var dynCall_iiiiiiiii=Module[\"dynCall_iiiiiiiii\"]=asm[\"dynCall_iiiiiiiii\"];var dynCall_iiiiiiiiiii=Module[\"dynCall_iiiiiiiiiii\"]=asm[\"dynCall_iiiiiiiiiii\"];var dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=asm[\"dynCall_iiiiij\"];var dynCall_v=Module[\"dynCall_v\"]=asm[\"dynCall_v\"];var dynCall_vi=Module[\"dynCall_vi\"]=asm[\"dynCall_vi\"];var dynCall_vii=Module[\"dynCall_vii\"]=asm[\"dynCall_vii\"];var dynCall_viii=Module[\"dynCall_viii\"]=asm[\"dynCall_viii\"];var dynCall_viiii=Module[\"dynCall_viiii\"]=asm[\"dynCall_viiii\"];var dynCall_viiiii=Module[\"dynCall_viiiii\"]=asm[\"dynCall_viiiii\"];var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=asm[\"dynCall_viiiiii\"];var dynCall_viiiiiii=Module[\"dynCall_viiiiiii\"]=asm[\"dynCall_viiiiiii\"];var dynCall_viiiiiiii=Module[\"dynCall_viiiiiiii\"]=asm[\"dynCall_viiiiiiii\"];var dynCall_viiiiiiiiii=Module[\"dynCall_viiiiiiiiii\"]=asm[\"dynCall_viiiiiiiiii\"];var dynCall_viijii=Module[\"dynCall_viijii\"]=asm[\"dynCall_viijii\"];Module[\"asm\"]=asm;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module[\"calledRun\"])run();if(!Module[\"calledRun\"])dependenciesFulfilled=runCaller};Module[\"callMain\"]=function callMain(args){args=args||[];ensureInitRuntime();var argc=args.length+1;var argv=stackAlloc((argc+1)*4);HEAP32[argv>>2]=allocateUTF8OnStack(Module[\"thisProgram\"]);for(var i=1;i<argc;i++){HEAP32[(argv>>2)+i]=allocateUTF8OnStack(args[i-1])}HEAP32[(argv>>2)+argc]=0;try{var ret=Module[\"_main\"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e==\"SimulateInfiniteLoop\"){Module[\"noExitRuntime\"]=true;return}else{var toLog=e;if(e&&typeof e===\"object\"&&e.stack){toLog=[e,e.stack]}err(\"exception thrown: \"+toLog);Module[\"quit\"](1,e)}}finally{calledMain=true}};function run(args){args=args||Module[\"arguments\"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\"calledRun\"])return;function doRun(){if(Module[\"calledRun\"])return;Module[\"calledRun\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();if(Module[\"_main\"]&&shouldRunNow)Module[\"callMain\"](args);postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout((function(){setTimeout((function(){Module[\"setStatus\"](\"\")}),1);doRun()}),1)}else{doRun()}}Module[\"run\"]=run;function exit(status,implicit){if(implicit&&Module[\"noExitRuntime\"]&&status===0){return}if(Module[\"noExitRuntime\"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module[\"onExit\"])Module[\"onExit\"](status)}Module[\"quit\"](status,new ExitStatus(status))}function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=\"\"}ABORT=true;EXITSTATUS=1;throw\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\"}Module[\"abort\"]=abort;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}var shouldRunNow=true;if(Module[\"noInitialRun\"]){shouldRunNow=false}Module[\"noExitRuntime\"]=true;run()\n\n\n\n\n;return Module;}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./obj/psp.sync.js\n// module id = 67\n// module chunks = 0"],"sourceRoot":""}